{"version":3,"file":"e87a39446b8428fb09df.chunk.js","mappings":"uOAkCM,SAAUA,EACdC,EACAC,EACAC,EACAC,GAEA,QAHa,IAAbD,IAAAA,GAAgB,QACL,IAAXC,IAAAA,EAAc,CAAC,IAEVH,EAASI,WACZ,OAGF,MAAMC,EAAM,IAAIC,IAAJ,CAAQ,KACdC,EArBF,SAA0BN,QAAY,IAAZA,IAAAA,EAAe,QAE7C,IAAIM,EAAY,YAKhB,MAJI,CAAC,OAAQ,MAAO,QAAS,UAAW,WAAWC,SAASP,KAC1DM,EAAY,2BAGPA,CACT,CAaoBE,CAAgBR,GAC5BS,EAASL,EAAIK,QAAO,GAC1BC,OAAOC,KAAKT,GAAaU,SAAQC,IAC/BJ,EAAOI,GAAOX,EAAYW,EAAI,IAEhCJ,EAAOK,UCpBH,SAAwBC,GAC5B,MAAMC,EAAQ,IAAIC,IAElB,OAAOC,KAAKC,UAAUJ,GAAQ,CAACF,EAAKO,KAClC,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,CAC/C,GAAIJ,EAAMK,IAAID,GAEZ,IAEE,OAAOF,KAAKI,MAAMJ,KAAKC,UAAUC,G,CACjC,MAAOG,GAEP,M,CAIJP,EAAMQ,IAAIJ,E,CAGZ,OAAOA,CAAK,GAEhB,CDDqBK,CAAc1B,GACZ,eAAjBC,IACFS,EAAOiB,WAAa,QAEtB,MAAMC,EAAMvB,EAAIE,UAAUA,GAAWG,OAAOA,GAAQmB,WACpD,OAAK3B,GAAiB0B,EAAIE,OAjCL,IAuCZ/B,EALiB,CACtBK,WAAYJ,EAASI,WACrB2B,SAAU/B,EAAS+B,UAGqB9B,GAAc,EAAO,CAC7D+B,yBAA0B,OAIvBJ,CACT,C,0FEvCA,MAWA,EAXwB,CACtBK,UAAS,WACTC,gBAAe,WACfC,UAAS,WACTC,SAAQ,WACRC,aAAY,WACZC,aAAY,WACZC,SAAQ,WACRC,aAAYA,EAAAA,U,eCmBd,MAAMC,EAAaC,IACjB,MAAMC,GAAeC,EAAAA,EAAAA,WAEdC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAC5C,CAAC,GAGGG,GAAaC,EAAAA,EAAAA,cAAaC,IAC9B,MAAM,QAAEC,GAAYV,EAChBU,GACFA,EAAQH,WAAWE,E,GAEpB,IAEGE,GAAaH,EAAAA,EAAAA,cACjB,CAACnD,EAAyBuD,EAAqBV,KAC7CC,EAAYD,GACZI,EAAmB,CAAC,GACpBM,EAAQC,KAAKC,OAAO5C,SACjB6C,IAIC,MAAMC,EAAU,IACVD,EAAS3C,UAAU4C,SAAW,MAC9B3D,EAAS2D,SAAW,MACpB3D,EAAS4D,eAAiB,IAE1BC,EAAe,IAChBH,EACH3C,UAAW,IACN2C,EAAS3C,UACZ4C,YAIE/B,EAAM7B,EAAkB8D,EAAa9C,UAAW,QAElDa,GACFkC,EAAAA,EAAeC,IAAI,CACjBC,SAAUpC,IAETqC,MAAKC,IAAa,IAAZ,KAAEC,GAAMD,EACb,MAAME,EAAQC,EAAgBR,EAAa9C,UAAUgB,UACnD8B,EAAa9C,UACboD,EACAzB,EAAM4B,YACNpB,EACAR,EAAMtC,WACN,GACAsC,EAAM6B,UAERtB,GAAmBD,IAAe,IAC7BA,EACH,CAACa,EAAaW,UAAWJ,KACxB,IAEJK,OAAM,Q,GAGd,GAEH,CAAC/B,EAAMtC,WAAYsC,EAAM4B,YAAa5B,EAAM6B,SAAUrB,IAGlDwB,GAAiBC,EAAAA,EAAAA,GAAYjC,EAAM1C,SAAS4E,cAClDC,EAAAA,EAAAA,YAAU,KACR,MAAM,SAAE7E,EAAQ,QAAEuD,GAAYb,GACVoC,IAAQJ,EAAgB1E,EAAS4E,cAEnDtB,EAAWtD,EAAUuD,E,GAEtB,CAACD,EAAYoB,EAAgBhC,IAEhC,MAAM,QAAEa,EAAO,SAAEvD,EAAQ,gBAAE+E,EAAe,OAAEC,EAAM,MAAEC,GAAUvC,EACxDwC,EAASvE,OAAOwE,OAAOnC,GAE7B,OACEoC,EAAAA,EAAAA,IAACC,EAAAA,EAA4B,CAC3BC,IAAK3C,EACL4C,qBAAsBhC,EAAQC,KAAKgC,aACnC3C,SAAUA,GAAYH,EAAMG,SAC5BqC,OAAQA,EACRO,SAAUzF,EAAS0F,aACnBX,gBAAiBA,EACjBY,iBAAkB7C,EAClBkC,OAAQA,EACRC,MAAOA,GACP,EAIN,GAAeW,EAAAA,EAAAA,MAAKnD,E,6IChIpB,MCsBMoD,EAAkD,CAAC,EAAG,EAAG,EAAG,KAE5DC,EAA4C,CAChDC,kBAAmB,CAACC,KAAM,WAAY3E,MAAO4E,GAAKA,EAAEC,gBACpDC,kBAAmB,CAACH,KAAM,WAAY3E,MAAO4E,GAAKA,EAAEG,gBACpDC,eAAgB,CAACL,KAAM,WAAY3E,MAAOwE,GAC1CS,eAAgB,CAACN,KAAM,WAAY3E,MAAOwE,GAC1CU,SAAU,CAACP,KAAM,WAAY3E,MAAO,GACpCmF,UAAW,CAACR,KAAM,WAAY3E,MAAO,GACrCoF,QAAS,CAACT,KAAM,WAAY3E,MAAO,GAEnCqF,aAAa,EAEbC,WAAY,SACZC,WAAY,CAACZ,KAAM,SAAU3E,MAAO,EAAGwF,IAAK,GAC5CC,eAAgB,CAACd,KAAM,SAAU3E,MAAO,EAAGwF,IAAK,GAChDE,eAAgB,CAACf,KAAM,SAAU3E,MAAO2F,OAAOC,iBAAkBJ,IAAK,IAmFzD,MAAMK,UAA2DC,EAAAA,EAE9EC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAQAC,YAAyC,IAAAC,EACvC,eAAAA,EAAOC,KAAKC,6BAAZ,IAAAF,OAAA,EAAOA,EAA4BD,UAAU,CAC3C,0BACA,2BAEH,CAEDI,aACE,OAAOC,MAAMD,WAAW,CAACE,GD3I7B,8kPC2IiCC,GC3IjC,qTD2IqCC,QAAS,CAACC,EAAAA,EAAWC,EAAAA,IACvD,CAGGC,oBACF,OAAO,CACR,CAEDC,kBAC2BV,KAAKC,sBAGbU,aAAa,CAC5BC,wBAAyB,CACvBC,KAAM,EACNtC,KAAM,KACNuC,KAAMd,KAAKe,oBACXC,YAAY,EACZC,SAAU,qBAEZC,wBAAyB,CACvBL,KAAM,EACNtC,KAAM,KACNuC,KAAMd,KAAKe,oBACXC,YAAY,EACZC,SAAU,qBAEZE,qBAAsB,CACpBN,KAAMb,KAAK/E,MAAMmG,YAAY/G,OAC7BkE,KAAM,KACN8C,YAAY,EACZL,YAAY,EACZC,SAAU,iBACVK,aAAclD,GAEhBmD,qBAAsB,CACpBV,KAAMb,KAAK/E,MAAMmG,YAAY/G,OAC7BkE,KAAM,KACN8C,YAAY,EACZL,YAAY,EACZC,SAAU,iBACVK,aAAclD,GAEhBoD,eAAgB,CACdX,KAAM,EACNG,YAAY,EACZC,SAAU,WACVK,aAAc,GAEhBG,gBAAiB,CACfZ,KAAM,EACNG,YAAY,EACZC,SAAU,YACVK,aAAc,GAEhBI,cAAe,CACbb,KAAM,EACNG,YAAY,EACZC,SAAU,UACVK,aAAc,IAInB,CAEDK,YAAYC,GAGV,GAFAzB,MAAMwB,YAAYC,GAEdA,EAAKC,YAAYC,kBAAmB,KAAAC,EACtC,MAAM,GAACC,GAAMhC,KAAKiC,QAClB,QAAAF,EAAA/B,KAAKkC,MAAMC,aAAX,IAAAJ,GAAAA,EAAkBK,SAClBpC,KAAKkC,MAAMC,MAAQnC,KAAKqC,UAAUL,GAClChC,KAAKC,sBAAuBqC,eAC7B,CACF,CAEDC,KAAI9F,GAAc,IAAb,SAAC+F,GAAF/F,EACF,MAAM,WAACyC,EAAD,WAAaC,EAAb,eAAyBE,EAAzB,eAAyCC,EAAzC,YAAyDL,EAAzD,cAAsEwB,GAC1ET,KAAK/E,MAEP+E,KAAKkC,MAAMC,MACRM,YAAYD,GACZC,YAAY,CACXxD,cACAC,WAAYwD,EAAAA,GAAKxD,GACjBC,aACAE,iBACAC,iBACAqD,gBAAiBlC,IAElB8B,MACJ,CAESF,UAAUL,GAClB,IAAIY,EAAsB,GAS1B,IAAK,IAAIC,EAAI,EAAGA,EARK,GAQaA,IAChCD,EAAYA,EAAUE,OAAO,CAACD,EAAG,EAAG,EAAGA,GAAI,EAAG,IAGhD,MAAMV,EAAQ,IAAIY,EAAAA,EAAMf,EAAI,IACvBhC,KAAKE,aACR8C,GAAIhD,KAAK/E,MAAM+H,GACfC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,SAAU,EACVC,WAAY,CACVR,UAAW,IAAIS,aAAaT,MAGhCU,aAAa,IAKf,OAFAnB,EAAMM,YAAY,CAACc,YAxBE,KA0BdpB,CACR,G,OA5IkB1C,EAAAA,YAGA,a,OAHAA,EAAAA,eAIGpB,G,oEElFlB,SAAUmF,EACdC,EACA3H,EACAe,EACApB,GAEA,MAAMM,EAAOD,EAAQC,KAAK2H,SACpBC,EAAKF,EAAGG,aACRC,EAAKJ,EAAGK,oBAEd,OAAO,IAAIrE,EAAS,CAClB1D,OACA6C,eAAgBmF,GACdA,EAAEC,aAAeD,EAAEE,OAAS,CAACN,EAAGO,EAAGP,EAAGQ,EAAGR,EAAGS,EAAG,IAAMT,EAAGU,GAC1DxF,eAAgBkF,GACdA,EAAEO,aAAeP,EAAEE,OAAS,CAACJ,EAAGK,EAAGL,EAAGM,EAAGN,EAAGO,EAAG,IAAMP,EAAGQ,GAC1DrB,GAAI,cAAcS,EAAG1G,WACrBwH,YAAad,EAAGe,aAAef,EAAGe,aAAe,MAC9CC,EAAAA,EAAAA,GAAiBhB,EAAIhI,GAvCDlD,EAuC+BkL,EAtChDiB,IACN/G,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,mBACbhH,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,OAAOC,EAAAA,EAAAA,GAAE,iCACTlL,MAAO,GAAG8K,EAAEnL,OAAOkF,eAAe,OAAOiG,EAAEnL,OAAOkF,eAAe,QAEnEd,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,OAAOC,EAAAA,EAAAA,GAAE,+BACTlL,MAAO,GAAG8K,EAAEnL,OAAOoF,eAAe,OAAO+F,EAAEnL,OAAOoF,eAAe,OAElEpG,EAASwM,YACRpH,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,MAAO,GAAGtM,EAASwM,cACnBnL,MAAO,GAAG8K,EAAEnL,OAAOyL,mBAd7B,IAA2BzM,CAyC3B,CAEA,SAAe0M,EAAAA,EAAAA,GAAiCzB,GArDhD,SAAmBzH,GACjB,MAAMmJ,EAAkB,GAMxB,OALAnJ,EAAK3C,SAAQ2K,IACXmB,EAAOC,KAAKpB,EAAEtF,gBACdyG,EAAOC,KAAKpB,EAAEpF,eAAe,IAGxBuG,CACT,G,yLCDA,MAAME,EAAc,CAClBC,UAAW,YACXpB,MAAO,YACPqB,KAAM,YACN,aAAc,YACdC,YAAa,cACb,eAAgB,cAChB,eAAgB,eAGZC,EAAaA,CAACvK,EAAmBwK,KACrC,MAAMC,EAAuB,CAAC,EAe9B,OAdAxM,OAAOC,KAAK8B,GAAO7B,SAAQuM,IACrBA,KAAKP,EACPM,EAASN,EAAYO,IAAM1K,EAAM0K,GAEjCD,EAASC,GAAK1K,EAAM0K,E,IAGO,iBAApB1K,EAAMoK,YACfK,EAASL,WAAYO,EAAAA,EAAAA,UAAS3K,EAAMoK,YAEL,iBAAtBpK,EAAMsK,cACfG,EAASH,aAAcK,EAAAA,EAAAA,UAAS3K,EAAMsK,cAGjC,IACFG,KACAD,EACJ,EAEH,IAAI/B,EACJ,MAAMmC,EAAiBA,CACrBC,EACAL,EACAM,KAOA,GALQ,MAAJD,GAAAA,EAAMpC,UACRoC,EAAKpC,SAAStK,SAAS4M,IACrBH,EAAeG,EAAKP,EAAeK,EAAKC,YAAcA,EAAW,IAG7D,MAAJD,GAAAA,EAAM7C,SAAU,CAClB,MAAMgD,EAAU,IACXH,EACHI,WAAYV,EAAWM,EAAKI,WAAYT,IAErCQ,EAAQF,aACXE,EAAQF,WAAaA,GAEvBrC,EAASyB,KAAKc,E,GAIlB,SAASE,EAAkBzB,GACzB,OACEA,EAAEnL,OAAOwM,aACPpI,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,kBACZzL,OAAOC,KAAKuL,EAAEnL,OAAOwM,YAAYK,KAAI,CAACC,EAAMC,KAC3C3I,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTvL,IAAK,QAAQiN,IACbzB,MAAO,GAAGwB,MACVzM,MAAO,GAAG8K,EAAEnL,OAAOwM,WAAWM,SAM1C,CAEA,MAAME,EAAgBC,IAAmB,IAAAC,EAAA,OAAY,MAAPD,GAAmB,OAAZC,EAAPD,EAASN,iBAAF,EAAPO,EAAqBpB,SAAS,EACtEqB,EAAgBF,IAAmB,IAAAG,EAAA,OAAY,MAAPH,GAAmB,OAAZG,EAAPH,EAASN,iBAAF,EAAPS,EAAqBpB,WAAW,EAExE,SAAU/B,EACdjL,EACAuD,EACAe,EACApB,GAEA,MAAMgI,EAAKlL,EACLqO,EAAKnD,EAAGoD,kBACRlD,EAAKF,EAAGqD,oBACRzB,EAAY,CAACuB,EAAG1C,EAAG0C,EAAGzC,EAAGyC,EAAGxC,EAAG,IAAMwC,EAAGvC,GACxCkB,EAAc,CAAC5B,EAAGO,EAAGP,EAAGQ,EAAGR,EAAGS,EAAG,IAAMT,EAAGU,GAC1CoB,EAA4B,CAAC,EAWnC,IAAIsB,EAOJ,OAjBI1B,EAAU,GAAK,IACjBI,EAAcJ,UAAYA,GAExBE,EAAY,GAAK,IACnBE,EAAcF,YAAcA,GAG9B7B,EAAW,GACXmC,EAAe/J,EAAQC,KAAM0J,GAGzBhC,EAAGuD,kBAELD,GAAcE,EAAAA,EAAAA,GAAcxD,EAAGuD,iBAC/BtD,EAAWqD,EAAYrD,IAGlB,IAAIwD,EAAAA,EAAa,CACtBlE,GAAI,iBAAiBS,EAAG1G,WACxBhB,KAAM2H,EACNyD,SAAU1D,EAAG0D,SACbC,OAAQ3D,EAAG2D,OACXC,QAAS5D,EAAG4D,QACZd,eACAG,eACAY,aAAc7D,EAAG8D,YAAc,EAC/BC,iBAAkB/D,EAAGgE,mBACrBC,eAAgBjE,EAAGkE,oBAChBlD,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY0K,IAExC,CAYA,MAAMyB,EAAiB3M,IAA6B,IAAA4M,EAClD,MAAM3M,GAAeC,EAAAA,EAAAA,UACfM,GAAaC,EAAAA,EAAAA,cAAaC,IAC9B,MAAM,QAAEC,GAAYV,EAChBU,GACFA,EAAQH,WAAWE,E,GAEpB,KAEG,SAAEpD,EAAQ,QAAEuD,EAAO,gBAAEwB,EAAe,YAAET,EAAW,OAAEU,EAAM,MAAEC,GAC/DvC,EAEIG,GAAqB0M,EAAAA,EAAAA,UAAQ,KACjC,GAAIvP,EAASwP,SAAU,CAAC,IAADC,EAAAC,EACrB,MAAM/C,GACG,MAAPpJ,GAAa,OAANkM,EAAPlM,EAASC,OAAc,OAAVkM,EAAbD,EAAetE,WAAgB,MAA/BuE,EAAyBC,YAAlB,EAAPD,EAAyBC,QACvB,CAACC,EAAyC3B,KACxC,MAAM4B,EAASC,IAAc7B,GAC7B,OAAI4B,EACK,IAAID,EAAK,CAACC,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,KAGtDD,CAAG,GAEZ,MACG,GAEP,GAAIjD,EAAO7K,OACT,OAAOiO,EAAAA,EAAAA,GAAYrN,EAAMG,SAAU,CACjCoC,QACAD,SACA2H,U,CAIN,OAAOjK,EAAMG,QAAQ,GACpB,CACD7C,EAASwP,SACTxK,EACO,MAAPzB,GAAa,OAAN+L,EAAP/L,EAASC,WAAF,EAAP8L,EAAenE,SACfzI,EAAMG,SACNoC,IAGIb,EAAQ6G,EAASjL,EAAUuD,EAASe,EAAapB,GAEvD,OACEkC,EAAAA,EAAAA,IAACC,EAAAA,EAA4B,CAC3BC,IAAK3C,EACL4C,qBAAsBhC,EAAQC,KAAKgC,aACnC3C,SAAUA,EACVqC,OAAQ,CAACd,GACTqB,SAAUzF,EAAS0F,aACnBX,gBAAiBA,EACjBC,OAAQA,EACRC,MAAOA,GACP,EAIN,GAAeW,EAAAA,EAAAA,MAAKyJ,E,iLChMpB,SAASzB,EAAkBzB,GACzB,OACE/G,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,mBACbhH,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,0BAA4B,KACrClL,MAAO,GAAG8K,EAAE6D,WAAW,OAAO7D,EAAE6D,WAAW,QAE7C5K,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,UAAY,KACrBlL,MAAO,GAAG8K,EAAEnL,OAAOiP,mBAI3B,CAEM,SAAUhF,EACdjL,EACAuD,EACAe,EACApB,GAEA,MAAMgI,EAAKlL,EAELkQ,EADaC,EAAAA,SAAmCjF,EAAGkF,cAEtDC,QACAxC,KAAInC,IAAS2B,EAAAA,EAAAA,UAAS3B,KACzB,IAAIlI,EAAOD,EAAQC,KAAK2H,SAEpBD,EAAGuD,kBAGLjL,GADoBkL,EAAAA,EAAAA,GAAcxD,EAAGuD,gBAC9BD,CAAYhL,IAGrB,MAAM8M,GAAUC,EAAAA,EAAAA,GAAWrF,EAAGsF,iBAAiBC,GAAKA,EAAEC,SAEtD,OAAO,IAAIC,EAAAA,EAAU,CACnBlG,GAAI,cAAcS,EAAG1G,WACrBhB,OACAoN,SAAU1F,EAAG2F,UACbjC,SAAU1D,EAAG0D,SACbsB,aACAY,SAAS,EAETC,kBAAmBT,EAEnBU,cAAeV,MACZpE,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY0K,IAExC,CAMA,SAAeqD,EAAAA,EAAAA,GAAsBhG,GAJrC,SAAmBzH,GACjB,OAAOA,EAAKqK,KAAIrC,GAAKA,EAAE0F,UACzB,G,8GCzFIC,EAAUC,KAAKC,GAAK,EACpBC,EAAS,CAAC,EAAGH,EAAS,EAAIA,EAAS,EAAIA,EAAS,EAAIA,EAAS,EAAIA,GAErE,SAASI,EAAO/F,GACd,OAAOA,EAAE,EACX,CAEA,SAASgG,EAAOhG,GACd,OAAOA,EAAE,EACX,C,qCCiCA,SAASiG,IAAQ,CAEjB,MAAM3L,EAAgD,CAEpD4L,YAAa,KACbxB,WAAYyB,EAAAA,EACZX,cAAe,CAAChL,KAAM,WAAY3E,MAAO,MACzCuQ,eAAgB,CAAC5L,KAAM,WAAY3E,MAAO,GAC1CwQ,iBAAkB,MAClBC,gBAAiB,CAAC9L,KAAM,SAAU3E,MAAO,EAAGwF,IAAK,EAAGkL,IAAK,KACzDC,gBAAiB,CAAChM,KAAM,SAAU3E,MAAO,IAAKwF,IAAK,EAAGkL,IAAK,KAC3DE,eAAgB,WAChBC,iBAAkBT,EAGlBU,gBAAiB,KACjBC,eAAgB,CAAC,EAAG,KACpBrB,kBAAmB,CAAC/K,KAAM,WAAY3E,MAAO,MAC7CgR,mBAAoB,CAACrM,KAAM,WAAY3E,MAAO,GAC9CiR,qBAAsB,MACtBC,yBAA0B,CAACvM,KAAM,SAAU3E,MAAO,EAAGwF,IAAK,EAAGkL,IAAK,KAClES,yBAA0B,CAACxM,KAAM,SAAU3E,MAAO,IAAKwF,IAAK,EAAGkL,IAAK,KACpEU,eAAgB,CAACzM,KAAM,SAAUa,IAAK,EAAGxF,MAAO,GAChDqR,mBAAoB,SACpBC,qBAAsBlB,EAEtBmB,OAAQ,CAAC5M,KAAM,SAAU3E,MAAO,IAAMwF,IAAK,GAC3CgM,SAAU,CAAC7M,KAAM,SAAUa,IAAK,EAAGkL,IAAK,EAAG1Q,MAAO,GAClDuN,UAAU,EACVkE,kBCvCK,SAAuBpQ,EAAOqQ,GACnC,MAAM,KAACvP,EAAD,OAAOoP,GAAUlQ,GACjB,SAACG,EAAD,WAAWgI,GAAckI,EAEzBC,EAAexP,EAAK1B,OA4CrB,SAAyB0B,EAAMuP,GACpC,MAAM,WAAClI,GAAckI,EACf1I,EAAYQ,EAAWR,UAAUhJ,OACjC,KAACiH,GAAQuC,EAAWR,UAAU4I,cAEpC,IAII3I,EAJA4I,EAAOC,IACPC,EAAOD,IACPE,GAAO,IACPC,GAAO,IAGX,IAAKhJ,EAAI,EAAGA,EAAIhC,EAAO9E,EAAK1B,OAAQwI,GAAKhC,EAAM,CAC7C,MAAMrC,EAAIoE,EAAUC,GACdiJ,EAAIlJ,EAAUC,EAAI,GACFtD,OAAOwM,SAASvN,IAAMe,OAAOwM,SAASD,KAG1DL,EAAO9B,KAAKvK,IAAIZ,EAAGiN,GACnBG,EAAOjC,KAAKW,IAAI9L,EAAGoN,GACnBD,EAAOhC,KAAKvK,IAAI0M,EAAGH,GACnBE,EAAOlC,KAAKW,IAAIwB,EAAGD,GAEtB,CAGD,MAAO,CAACJ,EAAME,EAAMC,EAAMC,GAAMG,MAAMzM,OAAOwM,UACzC,EAAEN,EAAOG,GAAQ,GAAID,EAAOE,GAAQ,GACpC,IACL,CAxEoCI,CAAgBlQ,EAAMuP,GAAqB,KACxEY,EAiFD,SAA2Bf,EAAQ/P,EAAU+Q,GAClD,MAAM,cAACC,GAAiBhR,EAASiR,kBAAkBF,GAEnD,OAAOhB,EAASiB,EAAc,EAC/B,CArFsBE,CAAkBnB,EAAQ/P,EAAUmQ,GAGnDgB,EAAe,IACf,SAACC,EAAD,WAAWC,IAAcC,EAAAA,EAAAA,IAAe3Q,GACxC6G,EAAYQ,EAAWR,UAAUhJ,OACjC,KAACiH,GAAQuC,EAAWR,UAAU4I,cACpC,IAAK,MAAMjS,KAAUiT,EAAU,CAC7BC,EAAWnG,QACX,MAAMqG,EAAWF,EAAWnG,MAAQzF,EAC9B4I,EAAW,CAAC7G,EAAU+J,GAAW/J,EAAU+J,EAAW,IACtCpN,OAAOwM,SAAStC,EAAS,KAAOlK,OAAOwM,SAAStC,EAAS,IAE7E8C,EAAapH,KAAK,CAChByH,YAAaxR,EAASyR,YAAYpD,GAClCqD,OAAQvT,EACR+M,MAAOmG,EAAWnG,QAGpByG,EAAAA,EAAIC,KAAK,iCAATD,EAEH,CAED,MAAME,EFjDO,WACb,IAMI/I,EACAgJ,EACAC,EARAC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACL/O,EAAIsL,EACJgC,EAAI/B,EAKR,SAASyD,EAAOtI,GACd,IAA8BrC,EAA1B4K,EAAW,CAAC,EAAGC,EAAO,GAAOC,EAAIzI,EAAO7K,OAE5C,IAAKwI,EAAI,EAAGA,EAAI8K,IAAK9K,EACnB,IAAI+K,MAAMC,GAAMrP,EAAEsP,KAAK,KAAMC,EAAQ7I,EAAOrC,GAAIA,EAAGqC,MAC5C0I,MAAMI,GAAMlC,EAAEgC,KAAK,KAAMC,EAAOlL,EAAGqC,IAD1C,CAGA,IAAI6I,EACAF,EACAG,EACAC,EAAKtE,KAAKuE,MAAMF,GAAUb,GAC1BgB,EAAKxE,KAAKuE,MAAML,EAAKA,EAAKX,GAAW,EAALe,GAAU,GAC1CG,EAAMJ,EAAKC,EAEf,GAAoB,EAAhBtE,KAAK0E,IAAID,GAAW,EAAG,CACzB,IAAIE,EAAMT,EAAKM,EACXI,EAAMJ,GAAMN,EAAKM,GAAM,EAAI,GAAK,EAChCK,EAAMP,GAAMD,EAAKC,GAAM,EAAI,GAC3BQ,EAAMZ,EAAKU,EACXG,EAAMV,EAAKQ,EACXF,EAAMA,EAAMF,EAAMA,EAAMK,EAAMA,EAAMC,EAAMA,IAAKP,EAAKI,GAAY,EAALN,EAAS,GAAK,GAAK,EAAGA,EAAKO,EAC5F,CAEA,IAAIxL,EAAKmL,EAAK,IAAMF,EAAIU,EAAMlB,EAASzK,GACnC2L,EAAKA,EAAIxJ,KAAK4I,IAEhBL,EAAKvI,KAAKwJ,EAAMlB,EAASzK,GAAM,CAAC+K,IAChCY,EAAInQ,GAAK2P,GAAW,EAALF,GAAU,GAAKf,EAC9ByB,EAAI7C,EAAImC,EAAKd,EAvB6C,CA2B9D,OAAOO,CACT,CAEA,SAASkB,EAAQzD,GACf,IAAIiC,EAAK,EAAGC,EAAK,EACjB,OAAOxD,EAAOzD,KAAI,SAASyI,GACzB,IAAIvB,EAAK3D,KAAKmF,IAAID,GAAS1D,EACvBoC,GAAM5D,KAAKoF,IAAIF,GAAS1D,EACxB+B,EAAKI,EAAKF,EACVD,EAAKI,EAAKF,EAEd,OADAD,EAAKE,EAAID,EAAKE,EACP,CAACL,EAAIC,EACd,GACF,CA2CA,OAzCAK,EAAOoB,QAAU,SAASzD,GACxB,MAAO,IAAMyD,EAAkB,MAAVzD,EAAiBjH,GAAKiH,GAAQ6D,KAAK,KAAO,GACjE,EAEAxB,EAAOyB,QAAU,WAIf,IAHA,IAAIA,EAAU,GACVC,EAAIvF,KAAKuE,MAAMb,EAAKF,GACpBtK,EAAI8G,KAAKuE,MAAMd,EAAKF,GACfpB,EAAIoD,EAAI/B,EAAIrB,EAAIyB,EAAKrJ,EAAG4H,GAAKqB,IAAM+B,EAC1C,IAAK,IAAI1Q,EAAIqE,EAAIqK,GAAU,EAAJgC,GAAShC,EAAK,EAAG1O,EAAI8O,EAAKJ,EAAK,EAAG1O,GAAK0O,EAC5D+B,EAAQ9J,KAAK,CAAC3G,EAAGsN,IAGrB,OAAOmD,CACT,EAEAzB,EAAO2B,KAAO,WACZ,IAAIC,EAAWR,EAAQ1K,GAAGmL,MAAM,EAAG,GAAGL,KAAK,KAC3C,OAAOxB,EAAOyB,UAAU7I,KAAI,SAAS4C,GAAK,MAAO,IAAMA,EAAI,IAAMoG,CAAU,IAAGJ,KAAK,GACrF,EAEAxB,EAAOhP,EAAI,SAAS8Q,GAClB,OAAO1P,UAAUvF,QAAUmE,EAAI8Q,EAAG9B,GAAUhP,CAC9C,EAEAgP,EAAO1B,EAAI,SAASwD,GAClB,OAAO1P,UAAUvF,QAAUyR,EAAIwD,EAAG9B,GAAU1B,CAC9C,EAEA0B,EAAOrC,OAAS,SAASmE,GACvB,OAAO1P,UAAUvF,QAAkB6S,EAAS,GAAjBhJ,GAAKoL,GAAgB3F,KAAKmF,IAAIpF,GAAUyD,EAAS,IAAJjJ,EAASsJ,GAAUtJ,CAC7F,EAEAsJ,EAAO3M,KAAO,SAASyO,GACrB,OAAO1P,UAAUvF,QAAU+S,EAAKC,EAAK,EAAGC,GAAMgC,EAAE,GAAI/B,GAAM+B,EAAE,GAAI9B,GAAU,CAACF,EAAKF,EAAIG,EAAKF,EAC3F,EAEAG,EAAO+B,OAAS,SAASD,GACvB,OAAO1P,UAAUvF,QAAU+S,GAAMkC,EAAE,GAAG,GAAIjC,GAAMiC,EAAE,GAAG,GAAIhC,GAAMgC,EAAE,GAAG,GAAI/B,GAAM+B,EAAE,GAAG,GAAI9B,GAAU,CAAC,CAACJ,EAAIC,GAAK,CAACC,EAAIC,GACnH,EAEOC,EAAOrC,OAAO,EACvB,CEnDoBqC,GACfrC,OAAOe,GACP1N,GAAEuF,GAAKA,EAAE6I,YAAY,KACrBd,GAAE/H,GAAKA,EAAE6I,YAAY,KAIxB,MAAO,CACL4C,SAHkBvC,EAAUV,GAGNnG,KAAI,CAACqJ,EAAKnJ,KAAN,CACxBmD,SAAUrO,EAASsU,cAAc,CAACD,EAAIjR,EAAGiR,EAAI3D,IAC7C5G,OAAQuK,EACRnJ,YAEF4F,eAEH,EDHCyD,YAAa,CAACpR,KAAM,WAAY3E,MAAO4E,GAAKA,EAAEiL,UAE9CmG,UAAU,EAGVC,YAAa,CAACtR,KAAM,WAAY3E,MAAO,KAAMkW,UAAU,IA4K1C,MAAMC,UAAyDC,EAAAA,EAG5ErQ,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAQAa,kBACE,MAAMuP,EAAgB,IAAIC,EAAAA,EAAc,CACtCC,cAAelV,GAASA,EAAMoQ,kBAC9B+E,YAAanV,GAASA,EAAMkQ,SAG9BnL,KAAKkC,MAAQ,CACX+N,gBACAI,gBAAiBJ,EAAc/N,MAC/BoO,SAAU,MAEatQ,KAAKC,sBACbjG,IAAI,CACnB4I,UAAW,CAAC/B,KAAM,EAAGtC,KAAM,KAAW0C,SAAU,gBAInD,CAEDU,YAAYC,GAGV,GAFAzB,MAAMwB,YAAYC,GAEdA,EAAKC,YAAY0O,mBAAoB,CACvC,MAAMF,EAAkBrQ,KAAKkC,MAAM+N,cAActO,YAAYC,EAAM,CACjExG,SAAU4E,KAAKiC,QAAQ7G,SACvBgI,WAAYpD,KAAKwQ,kBAEnB,GAAIxQ,KAAKkC,MAAMmO,gBAAgBI,YAAcJ,EAAgBI,UAAW,CAGtE,MAAM,gBAACC,GAAmBL,EAAgBI,WAAa,CAAC,EACxDzQ,KAAK2Q,SAAS,CACZL,SAAUI,GAAmB1Q,KAAK4Q,2BAA2BF,IAEhE,CAED1Q,KAAK2Q,SAAS,CAEZN,mBAEH,CACF,CAEDO,2BAA2BF,GACzB,MAAM,SAACtV,GAAY4E,KAAKiC,QACxB,GAAI4O,MAAMC,QAAQJ,IAA+C,IAA3BA,EAAgBrW,OAAc,CAElE,MAAM0W,EAAUL,EAAgB,GAC1BM,EAAUN,EAAgB,GAE1BO,EAAW,EAAEF,EAAQ,GAAKC,EAAQ,IAAM,GAAID,EAAQ,GAAKC,EAAQ,IAAM,GACvEE,EAAe9V,EAASyR,YAAYoE,IAEpC,cAACE,GAAiB/V,EAASiR,kBAAkB4E,GAYnD,OATiBP,EAAgBtK,KAAIgL,IACnC,MAAMC,EAASjW,EAASyR,YAAYuE,GAEpC,MAAO,EACJC,EAAO,GAAKH,EAAa,IAAMC,EAAc,IAC7CE,EAAO,GAAKH,EAAa,IAAMC,EAAc,GAFhD,GAOH,CAGD,OADApE,EAAAA,EAAIhT,MAAM,iEAAVgT,GACO,IACR,CAEDuE,eAAc7U,GAAU,IAAT,KAAC8U,GAAF9U,EACZ,OAAOuD,KAAKkC,MAAM+N,cAAcqB,eAAe,CAACC,QACjD,CAGDC,oBAAoBC,GAClB,OAAOzR,KAAKkC,MAAM+N,cAAczE,YAAY,YAArCxL,CAAkDyR,EAC1D,CAGDC,wBAAwBD,GACtB,OAAOzR,KAAKkC,MAAM+N,cAAczE,YAAY,YAArCxL,CAAkDyR,EAC1D,CAEDE,6BACE,OAAO3R,KAAKkC,MAAM+N,cAAc2B,kBAAkB5R,KAAK/E,MACxD,CAED4W,eACE,MAAM,eAAC7G,EAAD,SAAiB7D,EAAjB,SAA2BiE,EAA3B,SAAqCwE,EAArC,YAA+CkC,GAAe9R,KAAK/E,OACnE,gBAACoV,EAAD,SAAkBC,GAAYtQ,KAAKkC,MAEnC6P,EAAgB/R,KAAKgS,iBAAiB,eAAgBC,EAAAA,GACtDC,EAAiBlS,KAAK2R,6BAU5B,OAAO,IAAII,EACT,IATezB,EACb,CAACA,WAAUnF,OAAQ,GACnB,CAEEA,OAAQkF,EAAgBI,UAAUvE,cAAgB,EAClDiG,YAAa,SACbtD,MAAO,IAKTuD,eAAgB,EAChBpH,iBACA7D,WACAiE,WACAwE,WAEArJ,aAAcvG,KAAKwR,oBAAoBa,KAAKrS,MAC5CsS,aAActS,KAAK0R,wBAAwBW,KAAKrS,MAChD8R,YAAaA,GAAe,CAC1BvL,aAAcuL,EAAYvI,eAAiBuI,EAAY3H,eACvDmI,aAAcR,EAAYxI,mBAAqBwI,EAAYlH,qBAG/D5K,KAAKuS,iBAAiB,CACpBvP,GAAI,eACJkP,mBAEF,CACEnW,KAAMsU,EAAgBI,UAAU1U,MAGrC,G,OA5IkBgU,EAAAA,YAIA,iB,OAJAA,EAAAA,eAKG1R,G,qGE5NxB,SAAS8H,EAAkBzB,GACzB,OACE/G,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,mBACbhH,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,OAAOC,EAAAA,EAAAA,GAAE,uCACTlL,MAAO,IAAI8K,EAAE6D,WAAW,OAAO7D,EAAE6D,WAAW,SAE9C5K,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,UAAY,KACrBlL,MAAO,GAAG8K,EAAEnL,OAAOiP,mBAI3B,CAEM,SAAUhF,EACdjL,EACAuD,EACAe,EACApB,GAEA,MAAMgI,EAAKlL,EAELkQ,EADaC,EAA0B8J,SAAS/O,EAAGkF,cAEtDC,QACAxC,KAAInC,IAAS2B,EAAAA,EAAAA,UAAS3B,KACzB,IAAIlI,EAAOD,EAAQC,KAAK2H,SAEpBD,EAAGuD,kBAGLjL,GADoBkL,EAAAA,EAAAA,GAAcxD,EAAGuD,gBAC9BD,CAAYhL,IAErB,MAAM8M,GAAUC,EAAAA,EAAAA,GAAWrF,EAAGsF,iBAAiBC,GAAM,MAADA,OAAC,EAADA,EAAGC,SAEvD,OAAO,IAAI8G,EAAa,CACtB/M,GAAI,aAAaS,EAAG1G,WACpBhB,OACAoP,OAAQ1H,EAAG2F,UACXjC,SAAU1D,EAAG0D,SACbsB,aACAY,SAAS,EAETC,kBAAmBT,EAEnBU,cAAeV,MACZpE,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY0K,IAExC,CAMA,SAAeqD,EAAAA,EAAAA,GAAsBhG,GAJrC,SAAmBzH,GACjB,OAAOA,EAAKqK,KAAIrC,GAAKA,EAAE0F,UACzB,G,8IC1DA,SAAStD,EAAkBzB,GACzB,OACEA,EAAEnL,OAAOwM,aACPpI,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,kBACZzL,OAAOC,KAAKuL,EAAEnL,OAAOwM,YAAYK,KAAI,CAACC,EAAMC,KAC3C3I,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTvL,IAAK,QAAQiN,IACbzB,MAAO,GAAGwB,MACVzM,MAAO,GAAG8K,EAAEnL,OAAOwM,WAAWM,SAM1C,CAEM,SAAU7C,EACdjL,EACAuD,EACAe,EACApB,GAEA,MAAMgI,EAAKlL,EACLka,EAAIhP,EAAGG,aACP8O,EAAa,CAACD,EAAEvO,EAAGuO,EAAEtO,EAAGsO,EAAErO,EAAG,IAAMqO,EAAEpO,GAC3C,IAAItI,EAAOD,EAAQC,KAAK2H,SAAS0C,KAAKI,IAAwB,IACzDA,EACHmM,KAAMnM,EAAQmM,KACdnV,MAAOiG,EAAG8D,WACVtD,MAAOyO,MAQT,OALIjP,EAAGuD,kBAELjL,GADoBkL,EAAAA,EAAAA,GAAcxD,EAAGuD,gBAC9BD,CAAYhL,IAGd,IAAI6W,EAAAA,EAAU,CACnB5P,GAAI,cAAcS,EAAG1G,WACrB8V,SAAU9O,GAAKA,EAAEE,MACjB6O,QAAS/O,GAAKA,EAAE4O,KAChB7T,SAAUiF,GAAKA,EAAEvG,MACjBzB,OACAgX,SAAS,EACT5T,WAAY,EACZD,WAAYuE,EAAGkE,oBACZlD,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY0K,IAExC,CAWA,SAAeqD,EAAAA,EAAAA,GAAsBhG,GATrC,SAAmBzH,GACjB,IAAImJ,EAAkB,GAKtB,OAJAnJ,EAAK3C,SAAQ2K,IACXmB,EAASA,EAAOpC,OAAOiB,EAAE4O,KAAK,IAGzBzN,CACT,G,gLCkIA,MAAM8N,EAAqD,CAAC,EAAG,EAAG,EAAG,KAG/D3U,EAAgD,CACpDgJ,SAAS,EACTD,QAAQ,EACRD,UAAU,EACV6D,eAAgB,EAChBiI,WAAW,EACXC,YAAY,EACZC,cAAe,KAEfzL,eAAgB,SAChB0L,eAAgB,EAChBC,mBAAoB,EACpBC,mBAAoB/T,OAAOC,iBAC3B+T,kBAAkB,EAClBC,eAAgB,EAEhBC,WAAY,CAAClV,KAAM,WAAY3E,MAAO8Z,GAAKA,EAAEC,SAE7CpN,aAAc,CAAChI,KAAM,WAAY3E,MApBwB,CAAC,EAAG,EAAG,EAAG,MAsBnE8M,aAAc,CAACnI,KAAM,WAAY3E,MAAOoZ,GAExC1L,aAAc,CAAC/I,KAAM,WAAY3E,MAAO,GAExC0Y,aAAc,CAAC/T,KAAM,WAAY3E,MAAO,KAGxCgW,UAAU,GAIG,MAAMgE,UAA8DC,EAAAA,EAMjFnT,kBACEV,KAAKkC,MAAQ,CACX4R,MAAO,IAGL9T,KAAK/E,MAAM8Y,kBACbhH,EAAAA,EAAIiH,QAAQ,mBAAoB,qBAAhCjH,EAEH,CAEDpL,YAAWlF,GAAyC,IAAxC,YAACoF,GAAFpF,EACT,MAAMwX,EACJpS,EAAYqS,aACXrS,EAAYsS,wBACVtS,EAAYsS,sBAAsBC,KAAOvS,EAAYsS,sBAAsBV,YAEhF,GAAIQ,GAAmBpD,MAAMC,QAAQjP,EAAYqS,aAAc,CAC7D,MAAMJ,EAAQ9T,KAAKkC,MAAM4R,MAAMzE,QACzBgF,EAAYxS,EAAYqS,YAAY9N,KAAIkO,IAC5CC,EAAAA,EAAAA,GAAe,CACbxY,KAAM+X,EACNU,SAAUxL,GAAKA,EAAEyL,SAASnO,MAC1BgO,YACAI,QAAS1U,KAAK2U,UAAUL,OAG5BtU,KAAK2Q,SAAS,CAACmD,QAAOO,aACvB,MAAUJ,GACTjU,KAAK2Q,SAAS,CACZmD,MAAO9T,KAAK2U,YACZN,UAAW,MAGhB,CAEOM,UAAUL,QAA+C,IAA/CA,IAAAA,EAAkD,CAAC,GACnE,MAAM,KAACvY,EAAD,WAAO0X,EAAP,eAAmBmB,EAAnB,WAAmC1B,GAAclT,KAAK/E,MACtD6Y,EAA4B,GAC5Be,EAAkC,OAAnBD,EAA0B,EAAI,GAC7C,SAACE,EAAD,OAAWC,GAAUT,GAErB,SAAC9H,EAAD,WAAWC,IAAcC,EAAAA,EAAAA,IAAe3Q,EAAM+Y,EAAUC,GAC9D,IAAK,MAAMxb,KAAUiT,EAAU,CAC7BC,EAAWnG,QACX,IAAIqN,EAAUF,EAAWla,EAAQkT,GAC7ByG,IACFS,EAAUqB,EAAAA,GAAkBrB,EAASkB,IAEvC,MAAM,YAACI,GAAetB,EAChB/Q,EAAY+Q,EAAQ/Q,WAAa+Q,EAEvC,GAAIsB,EAIF,IAAK,IAAIpS,EAAI,EAAGA,GAAKoS,EAAY5a,OAAQwI,IAAK,CAC5C,MAAM8P,EAAO/P,EAAUyM,MAAM4F,EAAYpS,EAAI,IAAM,EAAGoS,EAAYpS,IAAMD,EAAUvI,QAClFyZ,EAAM3O,KAAKnF,KAAKkV,eAAe,CAACvC,QAAOpZ,EAAQkT,EAAWnG,OAC3D,MAEDwN,EAAM3O,KAAKnF,KAAKkV,eAAe,CAACvC,KAAM/P,GAAYrJ,EAAQkT,EAAWnG,OAExE,CACD,OAAOwN,CACR,CAGDjC,eAEE,MAAM,KACJ9V,EADI,UAEJoZ,EAFI,QAGJ9N,EAHI,OAIJD,EAJI,SAKJD,EALI,UAMJ8L,EANI,WAOJC,EAPI,cAQJC,EARI,eASJnI,EATI,YAUJ8G,EAVI,eAWJ8C,GACE5U,KAAK/E,OAGH,eACJyM,EADI,eAEJ0L,EAFI,mBAGJC,EAHI,mBAIJC,EAJI,iBAKJC,EALI,eAMJC,EANI,kBAOJ4B,GACEpV,KAAK/E,OAGH,aACJsL,EADI,aAEJG,EAFI,aAGJY,EAHI,iBAIJyM,EAJI,aAKJzB,EALI,WAMJmB,EANI,eAOJvB,EAPI,SAQJtC,GACE5P,KAAK/E,OAEH,MAAC6Y,EAAD,UAAQO,GAAarU,KAAKkC,MAE1BmT,EAAYrV,KAAKgS,iBAAiB,OAAQsD,EAAAA,GAC1CC,EAAcvV,KAAKgS,iBAAiB,SAAUY,EAAAA,GAG9C4C,EACJxV,KAAKyV,qBAAqB,OAAQ3B,IAClC,IAAIuB,EACF,CACEF,YACAhO,WACA6D,iBAEA5D,SACA6L,YACAC,aACAC,gBAEAb,eACA/L,eACAG,aAAcS,GAAY8L,EAAYvM,EAAesM,EAErDpD,WACAkC,eAEF9R,KAAKuS,iBAAiB,CACpBvP,GAAI,OACJkP,eAAgBA,GAAkB,CAChCuB,WAAYvB,EAAeuB,WAC3BnB,aAAcJ,EAAeI,aAC7B/L,aAAc2L,EAAe3L,aAG7BmP,WAAYvO,GAAY8L,EACxBvM,aAAcwL,EAAexL,gBAGjC,CACE3K,OACA6Y,iBACAnB,eAgDN,MAAO,EAEJtM,GAAYqO,GA5CZrO,GACDE,GACArH,KAAKyV,qBAAqB,SAAU3B,IACpC,IAAIyB,EACF,CACEJ,UAAWd,GAAa,KAAOA,GAC/BnV,WAAYwI,EACZvI,WAAYiU,EACZ/T,eAAgBgU,EAChB/T,eAAgBgU,EAChBqC,aAAcpC,EACdqC,WAAYpC,EACZqC,cAAeT,EAGfU,UAAW,OAEXhE,YAAaA,GAAe,CAC1BhT,SAAUgT,EAAYxK,aACtBuL,SAAUf,EAAYpL,aACtBoM,QAAShB,EAAY2B,YAGvBZ,SAAU7S,KAAK+V,oBAAoBrP,GACnC5H,SAAUkB,KAAK+V,oBAAoBzO,GACnC0O,aAAchW,KAAK+V,oBAAoBhC,IAEzC/T,KAAKuS,iBAAiB,CACpBvP,GAAI,SACJkP,eAAgBA,GAAkB,CAChCpT,SAAUoT,EAAe5K,aACzBuL,SAAUX,EAAexL,aACzBsP,aAAc9D,EAAe6B,oBAGjC,CACEhY,KAAM+X,EACNc,iBACA9B,QAAStU,GAAKA,EAAEmU,OASpBxL,GAAYqO,EAEf,G,OAhNkB5B,EAAAA,YAGA,iB,OAHAA,EAAAA,eAIGvV,G,mGChOxB,MAAM4X,EAAsB,GAYtB,SAAUC,EAAczZ,EAK5BiH,EACAzC,GAAmD,IAJjDkV,aAAcC,EACdC,YAAaC,GACL7Z,EAIV,IAAKiH,EACH,MAAO,GAET,QAA4B6S,IAAxBH,GAAoE,IAA/BA,EAAoB/b,OAAc,CAEzE,MAAMmc,EAAaF,EACfG,SAASH,EAAoB,IAC7BL,GACGS,EAAUC,IAAYpH,EAAAA,EAAAA,QAC3B7L,EACAzC,GACAmF,KAAKxM,GACY,iBAAVA,EAAqBgd,WAAWhd,GAASA,IAElD,QAAiB2c,IAAbG,QAAuCH,IAAbI,EAC5B,MAAO,GAET,MAAME,GAASF,EAAWD,GAAYF,EAChCM,EACM,IAAVD,EAAc,EAAIlN,KAAKW,IAAI,EAAGX,KAAKoN,KAAKpN,KAAKqN,MAAM,EAAIH,KACnDI,EACJN,EAAWC,WAAWD,EAASO,QAAQJ,IAAc,EAAI,EACrDK,EACJT,EAAWE,WAAWF,EAASQ,QAAQJ,IACnCJ,EAAW,EACXA,EAEN,OAAO,IAAI7F,MAAM2F,EAAa,EAAIS,GAC/B3R,KAAK,GACLc,KAAI,CAACkJ,EAAGzM,KAAOsU,EAAatU,EAAIgU,GAAOK,QAAQJ,I,CAGpD,OAAOV,EAAoBgB,MACzB,CAAC/S,EAAWD,IAAcwS,WAAWvS,GAAKuS,WAAWxS,IAEzD,CAEM,SAAUiT,EAAwBC,EAOtC5T,EACAzC,GAAmD,IANjDkV,aAAcC,EACdC,YAAaC,EACbiB,oBAAqBC,EAAiB,QACtCC,GACsBH,EAIxB,MAAMI,EACJtB,GAAuBE,EACnBJ,EACE,CACEC,aAAcC,EACdC,YAAaC,GAEf5S,EACAzC,GAEF,KACA0W,EAAc9G,MAAMC,QAAQ0G,GAC9B,IAAII,EAAAA,EAAiB,CACnBC,OAAQL,EACRxU,GAAI,YAEN8U,EAAAA,EAAAA,KAA8Bxb,IAAIkb,GAEtC,IAAKG,EACH,OAAO,KAET,IAAII,EACAC,EACJ,GAAoB,OAAhBN,EAAsB,CAExB,MAAM/J,EAAI+J,EAAYrd,OAAS,EACzB4d,EACJtK,EAAI,EACAgK,EAAYO,UAAUvK,GACtB,CAACgK,EAAYE,OAAOF,EAAYE,OAAOxd,OAAS,IAGhD8d,EAAQF,EAAe,GACvBG,EAAOH,EAAeA,EAAe5d,OAAS,GACpD4d,EAAeI,QAAQF,GACvBF,EAAe9S,KAAKiT,GAEpB,MAAMlT,EAASwS,EAAYtR,IAAIwQ,YAC/BmB,GAASO,EAAAA,EAAAA,KACNC,OAAOrT,GACP0D,MAAMqP,GACTD,EAAYpe,KAAWA,IAAUA,EAAQsL,EAAOyI,IAAM/T,EAAQsL,EAAO,G,KAChE,CAEL,MAAMsT,GAAoBjJ,EAAAA,EAAAA,QAAO7L,EAAUzC,GAIzC8W,EAHGS,EAAkBC,KAAK,KAGjBd,EAAYe,mBACnBnJ,EAAAA,EAAAA,QAAO7L,EAAUzC,IAHV0W,EAAYe,oBAMvBV,EAAYA,KAAM,C,CAGpB,OAAQjU,IACN,MAAM4U,EAAI1X,EAAS8C,GACnB,IAAK4U,EACH,MAAO,CAAC,EAAG,EAAG,EAAG,GAEnB,MAAMlG,GAAI7M,EAAAA,EAAAA,UAASmS,EAAOY,IAO1B,OANIX,EAAUW,GACZlG,EAAE,GAAK,EAEPA,EAAE,GAAMgF,EAAU,IAAO,IAGpBhF,CAAC,CAEZ,C,0BC/Hc,SAAUmG,EACtBpS,GAEA,MAAO,aAAcA,EAAQmN,QACzBnN,EAAQmN,QAAQ1Q,SAAS4V,YAAY,GACrCrS,EAAQmN,OACd,C,qCC+CM,SAAUnQ,EACdjL,EACAuD,EACAe,EACApB,EACAqd,EACAhc,GAEA,MAAM2G,EAAKlL,EACLqO,EAAKnD,EAAGoD,kBACRlD,EAAKF,EAAGqD,oBACd,IAAI/K,EAAO,IAAID,EAAQC,KAAK2H,UAExBD,EAAGuD,kBAGLjL,GADoBkL,EAAAA,EAAAA,GAAcxD,EAAGuD,gBAC9BD,CAAYhL,IAGrB,MAAMgd,EAActV,EAAGuV,OAASvV,EAAGuV,OAAOnU,OAASpB,EAAGuV,OAAS,KAGzDC,EACU,OAAdxV,EAAGuV,OACC,IAAM,CAACpS,EAAG1C,EAAG0C,EAAGzC,EAAGyC,EAAGxC,EAAG,IAAMwC,EAAGvC,GAClCgT,EAAyB5T,EAAI1H,GALjBgI,GAAkBA,EAAEgV,KAQhCG,EAAenV,IACnB,MAAMoV,GAA4B,MAAfF,OAAe,EAAfA,EAAkBlV,KAK/B,CAAC,EAAG,EAAG,EAAG,GAKhB,OAJI+U,EAASze,OAAS,IAAMye,EAAS/f,SAASgL,EAAEN,EAAG2V,gBACjDD,EAAU,IAAM,GAGXA,CAAS,EAGZE,EACJ5V,EAAG2V,aACH3V,EAAGuV,QACH,CAAC,OAAQ,UAAW,WAAWjgB,SAAS0K,EAAG6V,WA3E/C,SAA2B/gB,GACzB,OAAQmM,IACN,MAAMqU,EAAcxgB,EAASygB,OAAOnU,OAAStM,EAASygB,OAEtD,OACErb,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,kBACZD,EAAEnL,OAAOggB,OACR5b,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,QAAU,KACnBlL,MAAO,GAAG8K,EAAEnL,OAAOggB,SAGtB7U,EAAEnL,OAAOhB,EAAS6gB,eACjBzb,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,MAAO,GAAGtM,EAAS6gB,gBACnBxf,MAAO,GAAG8K,EAAEnL,OAAOhB,EAAS6gB,iBAG/B7gB,EAASygB,SACRrb,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CACTC,MAAO,GAAGkU,MACVnf,MAAO,GAAG8K,EAAEnL,OAAOwf,OAGnB,CAGZ,CAgDQ5S,CAAkB1C,GAClB,IAAM,KAEZ,OAAO,IAAImQ,EAAa,CACtB5Q,GAAI,cAAcS,EAAG1G,WACrBhB,OACAqL,OAAQ3D,EAAG2D,OACXC,QAAS5D,EAAG4D,QACZoM,WAAYmF,EACZrS,aAAc2S,EACdxS,aAAc,CAAC/C,EAAGO,EAAGP,EAAGQ,EAAGR,EAAGS,EAAG,IAAMT,EAAGU,GAC1CiD,aAAc7D,EAAG8D,WACjBJ,SAAU1D,EAAG0D,SACbO,eAAgBjE,EAAGkE,gBACnB2K,aAAcvO,GAtGlB,SACEA,EACAmV,GAOA,OAA6B,IAAtBA,EAAYnV,GAAG,GAAW,EAAIA,EAAEyV,SACzC,CA4FuBlH,CAAavO,EAAGmV,GACnClO,eAAgBvH,EAAGgW,WACnB3Y,MAAM,MACH2D,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY4d,EAAyBvc,IAEjE,CAkBA,MAAM4c,EAAiBze,IACrB,MAAMC,GAAeC,EAAAA,EAAAA,UAEfwe,GAAsBje,EAAAA,EAAAA,cAAY,KACtC,IAAIN,EAAW,IAAKH,EAAMG,UAC1B,GAAIH,EAAM1C,SAASwP,SAAU,CAC3B,MAAMrE,EAAWzI,EAAMa,QAAQC,KAAK2H,UAAY,GAChDtI,GAAWkN,EAAAA,EAAAA,GAAYlN,EAAU,CAC/BoC,MAAOvC,EAAMuC,MACbD,OAAQtC,EAAMsC,OACd2H,OAAQxB,EAASkW,QAAQhB,I,CAM7B,OAHIxd,EAASye,KAAO,IAClBze,EAASye,KAAO,GAEXze,CAAQ,GACd,CAACH,KAEG6e,EAAWC,IAAgBze,EAAAA,EAAAA,UAAS,IACpCF,EAAUC,IAAeC,EAAAA,EAAAA,UAASqe,MAClCK,EAAeC,IAAoB3e,EAAAA,EAAAA,UAASL,EAAMa,QAAQxC,YAC1Dwf,EAAUoB,IAAe5e,EAAAA,EAAAA,UAAuB,KAEvD8B,EAAAA,EAAAA,YAAU,KACR,MAAM,QAAEtB,GAAYb,EAEhBa,EAAQxC,YAAc0gB,IACxB3e,EAAYse,KACZO,EAAY,IACZH,EAAa,GACbE,EAAiBne,EAAQxC,W,GAE1B,CAACqgB,EAAqB1e,EAAO+e,EAAe5e,IAE/C,MAAMK,GAAaC,EAAAA,EAAAA,cAAaC,IAC9B,MAAM,QAAEC,GAAYV,EAChBU,GACFA,EAAQH,WAAWE,E,GAEpB,IAEGmB,GAAWpB,EAAAA,EAAAA,cACdiY,IACC,MAAM,SAAEpb,EAAQ,YAAEsE,GAAgB5B,EAE5Bkf,GAAM,IAAIC,MAAOC,UACjBC,EAAcH,EAAML,GA9KD,IAiLnBS,EAAe,IAAIzB,GACzB,GAAIwB,EACFC,EAAaC,OAAO,EAAGD,EAAalgB,OAAQsZ,QACvC,GAAIpb,EAASkiB,gBAAiB,CACnC,MAAM5X,EAAI0X,EAAaG,QAAQ/G,IACpB,IAAP9Q,EACF0X,EAAapV,KAAKwO,GAElB4G,EAAaC,OAAO3X,EAAG,E,MAGzB0X,EAAaC,OAAO,EAAG,EAAG7G,GAG5BuG,EAAYK,GACZR,EAAaI,GACT5hB,EAASoiB,cACX9d,EAAYtE,EAAS6gB,YAAaN,GAAU,GAAO,E,GAGvD,CAACgB,EAAW7e,EAAO6d,IAGf8B,GAAYlf,EAAAA,EAAAA,cAAY,SACQ6a,IAAhCtb,EAAMa,QAAQC,KAAK2H,SACd,GAYF,CATOF,EACZvI,EAAM1C,SACN0C,EAAMa,QACNb,EAAM4B,YACNpB,EACAqd,EACAhc,KAID,CACDA,EACA7B,EAAM1C,SACN0C,EAAM4B,YACN5B,EAAMa,QACNgd,EACArd,KAGI,QAAEK,EAAO,SAAEvD,EAAQ,gBAAE+E,GAAoBrC,EAEzC8d,EAAcxgB,EAASygB,OACzBzgB,EAASygB,OAAOnU,OAAStM,EAASygB,OAClC,KAGE6B,EF/GF,SACJpX,EACAC,EACAzC,GAEA,MAAMyW,EAAcxB,EAAezS,EAAIC,EAAUzC,GAC3CiY,EAAc7B,EAAyB5T,EAAIC,EAAUzC,GACrD4Z,EAAU,CAAC,EAajB,OAZAnD,EAAYrI,MAAM,GAAGjW,SAAQ,CAACQ,EAAOiJ,KACnC,MAAM+F,EAAQ,GAAG8O,EAAY7U,QAAQ6U,EAAY7U,EAAI,KAC/CiY,EACJ,IAAOlE,WAAWc,EAAY7U,IAAM+T,WAAWc,EAAY7U,EAAI,KAE3DkW,EAActV,EAAGuV,OAASvV,EAAGuV,OAAOnU,OAASpB,EAAGuV,OAAS,KAC/D6B,EAAQjS,GAAS,CACf3E,MAAkB,MAAXiV,OAAW,EAAXA,EAAc,CAAE,CAACH,GAAetV,EAAGuV,QAAS8B,IACnDC,SAAS,EACV,IAGIF,CACT,CE0FkBG,CAAWziB,EAAUuD,EAAQC,KAAK2H,UAFhCK,GAAkBA,EAAEgV,KAItC,OACEpb,EAAAA,EAAAA,IAAA,OAAKsd,MAAO,CAAExR,SAAU,cACtB9L,EAAAA,EAAAA,IAACC,EAAAA,EAA4B,CAC3BC,IAAK3C,EACLE,SAAUA,EACVqC,OAAQmd,IACRtd,gBAAiBA,EACjBU,SAAUzF,EAAS0F,aACnBH,qBAAsBhC,EAAQC,KAAKgC,aACnCP,MAAOvC,EAAMuC,MACbD,OAAQtC,EAAMsC,SAGK,OAApBhF,EAASygB,SACRrb,EAAAA,EAAAA,IAACud,EAAAA,EAAM,CACLC,WAAYN,EACZpR,SAAUlR,EAAS6iB,gBACnBC,OAAQ9iB,EAAS+iB,gBAGjB,EAIV,GAAend,EAAAA,EAAAA,MAAKub,E,gJCtRb,MAQD6B,EAAgB,Q,eCEtB,SAASpV,EACP5N,EACAijB,GAEA,OAAQ9W,IAAiB,IAAA+W,EACvB,MAAM5W,GACM,MAAV2W,OAAU,EAAVA,EAAajjB,EAASmjB,mBAAmB9hB,UACzC+hB,EAAAA,EAAAA,GAA0C,OAA5BF,EAACljB,EAASmjB,yBAAkB,EAA3BD,EAA6B7hB,OAC9C,OACE+D,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,mBACbhH,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,0BAA4B,KACrClL,MAAO,GAAG8K,EAAEnL,OAAOkQ,SAAS,OAAO/E,EAAEnL,OAAOkQ,SAAS,OAEtD/E,EAAEnL,OAAOyL,YACRrH,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,YAAc,KACvBlL,MAAO,GAAG8K,EAAEnL,OAAOyL,cAGtBN,EAAEnL,OAAOyf,SACRrb,EAAAA,EAAAA,IAACiH,EAAAA,EAAU,CAACC,MAAO,GAAGA,MAAWjL,MAAO,GAAG8K,EAAEnL,OAAOyf,WAElD,CAGZ,CAEM,SAAUxV,EACdjL,EACAuD,EACAe,EACApB,EACA9C,GAEA,MAAM8K,EAAKlL,EACLqjB,EAAiB9f,EAAQC,KAAK2H,SAAS0C,KAAKrC,IAChD,IAAIoH,GDvCqB0Q,ECuCCpY,EAAGqY,WDvCQC,ECuCIhY,EAAEoH,QDtChC,aAAT0Q,EACKlS,KAAKqS,KAAKD,EAAMpS,KAAKC,IAEjB,aAATiS,EACKE,EAEI,cAATF,EACW,IAANE,EAEI,iBAATF,EACKE,EAAMR,EAEF,cAATM,EACgC,IAA3BlS,KAAKqS,KAAKD,EAAMpS,KAAKC,IAEjB,iBAATiS,EACKlS,KAAKqS,KAAKD,EAAMpS,KAAKC,IAAM2R,EAG7B,OCmBiD,IDvCpD,IAAuBM,EAAYE,EC2CrC,GAHItY,EAAGgW,aACLtO,GAAU1H,EAAGgW,YAEX1V,EAAEE,MACJ,MAAO,IAAKF,EAAGoH,UAEjB,MAAMsH,EAAIhP,EAAGG,cAAgB,CAAEM,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC9CJ,EAAQ,CAACwO,EAAEvO,EAAGuO,EAAEtO,EAAGsO,EAAErO,EAAS,IAANqO,EAAEpO,GAEhC,MAAO,IAAKN,EAAGoH,SAAQlH,QAAO,IAGhC,OAAO,IAAIgY,EAAAA,EAAiB,CAC1BjZ,GAAI,iBAAiBS,EAAG1G,WACxBhB,KAAM6f,EACN9a,MAAM,EACNyF,aAAcxC,GAAKA,EAAEE,MACrBiY,UAAWnY,GAAKA,EAAEoH,OAClBgR,gBAAiB5c,OAAOkE,EAAG2Y,kBAAe7F,EAC1C8F,gBAAiB9c,OAAOkE,EAAG6Y,kBAAe/F,EAC1ClP,SAAS,MACN5C,EAAAA,EAAAA,GACDhB,EACAhI,EACA0K,EAAkB1C,EAAc,MAAV9K,OAAU,EAAVA,EAAY6iB,cAGxC,CAEA,SAAevW,EAAAA,EAAAA,GAAiCzB,GAzEhD,SAAmBzH,GACjB,OAAOA,EAAKqK,KAAIrC,GAAKA,EAAE0F,UACzB,G,uNCfA,MCQM8S,EAAmB,CAAC,EAAG,EAAG,EAAG,GAC7BC,EAAmB,CAAC,EAAG,IAAK,EAAG,KAC/BC,EAAc,CAAC,WAAY,WAAY,aAAc,eAErDpe,EAAuD,CAC3Dqe,eAAgB,CAAC9iB,MAAO,IAAKwF,IAAK,GAClCud,iBAAkB,CAAC/iB,MAAO,EAAGwF,IAAK,EAAGkL,IAAK,GAE1CL,YAAa,KACbxB,WAAYyB,EAAAA,GAWC,MAAM0S,UAAsEld,EAAAA,EAEzFC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAIkB,mBAACmC,GACjB,OAAO6a,EAAAA,EAAAA,IAAY7a,EAAI,CAAC8a,EAAAA,EAASC,eAClC,CAKD7c,aACE,MAAO,CAACE,GD1CZ,o0DC0CgBC,GCzChB,8RDyCoBC,QAAS,CAACE,EAAAA,GAC3B,CAEDE,kBACE,MAAM,GAACsB,GAAMhC,KAAKiC,QACOjC,KAAKC,sBACbU,aAAa,CAE5Bqc,kBAAmB,CAACnc,KAAM,EAAGoc,OAAQjd,KAAKkd,4BAC1CC,eAAgB,CAACtc,KAAM,EAAGuc,SAAS,KAErCpd,KAAK2Q,SAAS,CACZxO,MAAOnC,KAAKqC,UAAUL,IAEzB,CAEDqb,kBAAiB5gB,GAAiB,IAAhB,YAACoF,GAAFpF,EAEf,OAAOoF,EAAYyb,gBACpB,CAED3b,YAAY4b,GACVpd,MAAMwB,YAAY4b,GAElB,MAAM,SAACC,EAAD,MAAWviB,EAAX,YAAkB4G,GAAe0b,EAEjCE,EAAmBzd,KAAKC,sBAC1BhF,EAAMyiB,eAAiBF,EAASE,aAClCD,EAAiBnb,gBACRkb,EAASd,iBAAmBzhB,EAAMyhB,gBAC3Ce,EAAiBE,WAAW,qBAG9B3d,KAAK4d,gBAAgBJ,EAAUviB,EAAO4G,EACvC,CAEDU,KAAI+U,GAAc,IAAb,SAAC9U,GAAF8U,EACF,MAAM,WAACuG,EAAD,WAAaC,GAAc9d,KAAK/E,MAChC8iB,EAAW/d,KAAK/E,MAAM8iB,UAAYxB,EAClCyB,EAAWhe,KAAK/E,MAAM+iB,UAAYxB,EAIlCvS,EAAcjK,KAAK/E,MAAMgP,aAAe,CAAC,EAAG,IAC5C,MAAC9H,GAASnC,KAAKkC,MACrBC,EACGM,YAAYD,GACZC,YAAY,CACXsb,WACAC,WACAF,aACA7T,gBAED1H,KAAK,CACJsb,WAAY,CACVI,WAAW,EACXC,WAAW,KACRL,IAGV,CAEDX,2BAA2BiB,EAADC,GAA6B,IAAjB,aAACV,GAAbU,EACxB,MAAM,MAAC5gB,EAAD,OAAQD,GAAUyC,KAAKiC,QAAQ7G,UAC/B,eAACshB,GAAkB1c,KAAK/E,MACxBojB,EAAS1U,KAAKoN,KAAKvZ,EAAQkf,IAE3B,MAAC9iB,EAAD,KAAQiH,GAAQsd,EAEtB,IAAK,IAAItb,EAAI,EAAGA,EAAI6a,EAAc7a,IAAK,CACrC,MAAMrE,EAAIqE,EAAIwb,EACRvS,EAAInC,KAAK2U,MAAMzb,EAAIwb,GACzBzkB,EAAMiJ,EAAIhC,EAAO,GAAOrC,EAAIke,EAAkBlf,EAAS,EAAI,EAC3D5D,EAAMiJ,EAAIhC,EAAO,GAAK,EAAMiL,EAAI4Q,EAAkBnf,EAAU,EAC5D3D,EAAMiJ,EAAIhC,EAAO,GAAK,CACvB,CACF,CAIDwB,UAAUL,GACR,OAAO,IAAIe,EAAAA,EAAMf,EAAI,IAChBhC,KAAKE,aACR8C,GAAIhD,KAAK/E,MAAM+H,GACfC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,SAAU,EACVC,WAAY,CACVR,UAAW,IAAIS,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,OAGlEC,aAAa,GAEhB,CAEDib,mBACE,MAAM,SAACR,EAAD,SAAWC,EAAX,YAAqB/T,EAArB,WAAkCxB,GAAczI,KAAK/E,MAC3D,OAAI8iB,GAAYC,GACdjR,EAAAA,EAAIyR,WAAW,+CAAgD,0BAA/DzR,IACO,IAIL9C,IAAexB,CAKpB,CAEDmV,gBAAgBJ,EAAUviB,EAAO4G,GAC/B,MAAM,MAACM,GAASnC,KAAKkC,MASrB,GARIua,EAAYhE,MAAKpf,GAAOmkB,EAASnkB,KAAS4B,EAAM5B,MAClD8I,EAAMM,YAAY,CAACgc,gBAAiBze,KAAKue,qBAGvCf,EAAS/U,aAAexN,EAAMwN,YAChCtG,EAAMM,YAAY,CAACgG,YAAYiW,EAAAA,EAAAA,GAAsBzjB,EAAMwN,cAI3D+U,EAASb,mBAAqB1hB,EAAM0hB,kBACpCa,EAASd,iBAAmBzhB,EAAMyhB,gBAClC7a,EAAY8c,gBACZ,CACA,MAAM,MAACnhB,EAAD,OAAQD,GAAUyC,KAAKiC,QAAQ7G,UAC/B,eAACshB,EAAD,iBAAiBC,GAAoB3c,KAAK/E,MAC1C2jB,EAASlC,EAAiBC,EAAmBA,EAAmB,EAEhEkC,EAAY,IAAIxb,aAAa,EAC/BqZ,EAAiBkC,GAAUphB,EAAS,IACnCkf,EAAiBkC,GAAUrhB,EAAU,EACxC,IAEF4E,EAAMM,YAAY,CAACoc,aACpB,CACF,G,OArJkBjC,EAAAA,YAGA,wB,OAHAA,EAAAA,eAIGve,G,0BEXxB,MAAMA,EAAmD,IACpDue,EAAoBve,aACvBsR,YAAa,CAACpR,KAAM,WAAY3E,MAAOmK,GAAKA,EAAE0F,UAC9CqV,UAAW,CAACvgB,KAAM,WAAY3E,MAAO,GAErCmlB,gBAAgB,EAChBC,YAAa,OAGTC,EAA0B,YAC1BC,EAAa,CACjBnjB,KAAM,CACJd,MAAO,CAAC,mBAEVkkB,QAAS,CACPlkB,MAAO,CAAC,eACRmkB,UAAW,CAAC,eAoFD,MAAMC,UAGXC,EAAAA,EAAiF3f,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAYzFa,kBACE,MAAM,GAACsB,GAAMhC,KAAKiC,QAClB,IAAK2a,EAAoB2C,YAAYvd,GAInC,OAFAhC,KAAK2Q,SAAS,CAAC6O,WAAW,SAC1BzS,EAAAA,EAAIhT,MAAJ,oBAAA+I,OAA8B9C,KAAKgD,GAAnC,qCAAA+J,GAGF5M,MAAMsf,2BAA2B,CAC/BC,WAAYR,EAEZ9O,YAAanV,GAASA,EAAMyhB,iBAE9B,MAAMyC,EAAU,CACdQ,MAAO,CACL9e,KAAM,EACN+e,UAAWC,EAAAA,GAAsBC,IACjCC,SAAS,EACTjC,YAAYkC,EAAAA,EAAAA,IAAgBhe,EAAI,CAACgB,GAAI,GAAFF,OAAK9C,KAAKgD,GAAV,oBAGvChD,KAAK2Q,SAAS,CACZ6O,WAAW,EACXS,eAAe,EACfd,UACAe,aAAc,CAAC9c,WAAY,CAAC,GAC5B0a,WAAYqB,EAAQQ,MAAM7B,WAC1BqC,sBAAuB,YACvBC,UAAW,CAAC,EAAG,GACfC,YAAa,CAAC,GAAI,KAEKrgB,KAAKC,sBACbjG,IAAI,CACnB,CAACilB,GAA0B,CACzBpe,KAAM,EACNI,SAAU,cACV1C,KAAM,KACNuC,KAAMd,KAAKe,qBAGb4e,MAAO,CAAC9e,KAAM,EAAGI,SAAU,cAE9B,CAEDoc,kBAAiB5gB,GAAyC,IAAxC,YAACoF,GAAFpF,EACf,OAAOuD,KAAKkC,MAAMsd,WAAa3d,EAAYyb,gBAC5C,CAED3b,YAAYC,GACVzB,MAAMwB,YAAYC,EACnB,CAEDiQ,eACE,IAAK7R,KAAKkC,MAAMsd,UACd,MAAO,GAET,MAAM,WAAC1B,EAAD,OAAawC,EAAb,OAAqBjC,EAArB,QAA6Bc,GAAWnf,KAAKkC,OAC7C,eAACgQ,GAAkBlS,KAAK/E,OACxB,kBAACslB,GAAqBpB,EAAQQ,MAGpC,OAAO,IAFgB3f,KAAKgS,iBAAiB,QAAS4K,GAE/C,CACL5c,KAAK/E,MACL+E,KAAKuS,iBAAiB,CACpBvP,GAAI,aACJkP,mBAEF,CACEnW,KAAM,CAACqH,WAAY,CAAC+Z,eAAgBoD,IACpCzC,aACAJ,aAAc4C,EAASjC,GAG5B,CAEDmC,cAAcve,GACZ9B,MAAMqgB,cAAcve,GAEpB,MAAM,kBAACse,EAAD,UAAoBE,EAApB,WAA+B3C,GAAc9d,KAAKkC,MAExDqe,SAAAA,EAAmBne,SACnBqe,SAAAA,EAAWre,SACX0b,SAAAA,EAAY1b,QACb,CAEDkP,eAAcgG,GAA6C,IAA5C,KAAC/F,GAAF+F,EACZ,MAAM,MAAChR,GAASiL,EAChB,GAAIjL,GAAS,EAAG,CACd,MAAM,kBAACoa,EAAD,eAAoB3B,EAApB,QAAoCI,GAAWnf,KAAKkC,MAEpDye,EAAqB5B,EACvB2B,EAAkBE,QAAQ,SAC1BzB,EAAQQ,MAIZpO,EAAKhY,OAASsnB,EAAAA,EAAkBC,mBAAmB,CACjDC,WAAYza,KACTqa,GAEN,CAED,OAAOpP,CACR,CAIDyP,cAAa5C,GAA8B,IAA7B,gBAAC6C,EAAD,QAAkBC,GAAnB9C,EACX,MAAM,MAACuB,GAAS3f,KAAKkC,MAAMid,QAC3BQ,EAAMsB,gBAAkBA,EACxBtB,EAAMY,kBAAkBY,QAAQ,CAACplB,KAAMklB,IACvCtB,EAAMuB,QAAUA,EAChBvB,EAAM7B,WAAWsD,aAAa,CAACrlB,KAAMmlB,GACtC,CAGDG,uBAAuBzf,GACrB,MAAMuH,EAAWvH,EAAK3G,MAAMyhB,eACtB4E,EAAkB1f,EAAK4b,SAASd,iBAAmBvT,GACnD,gBAACwV,GAAmB/c,EAAKC,YAC/B,IAAIkd,EAAiBnd,EAAK3G,MAAM8jB,eAC5B/e,KAAKkC,MAAM6c,iBAAmBnd,EAAK3G,MAAM8jB,gBACvCA,IAAmB8B,EAAAA,EAAkBtB,YAAYvf,KAAKiC,QAAQD,MAChE+K,EAAAA,EAAIC,KAAK,0DAATD,GACAgS,GAAiB,GAGrB,MAAMwC,EAAwBxC,IAAmB/e,KAAKkC,MAAM6c,eAC5D/e,KAAK2Q,SAAS,CACZoO,mBAGF,MAAMyC,EAAmBxhB,KAAKyhB,mBAAmBxC,IAE3C,WAACS,GAAc1f,KAAKkC,OACpB,KAACnG,EAAD,QAAOojB,GAAWO,EAClBgC,EACJF,GACAD,GACA5C,GACA3e,KAAK2hB,mBAAmB/f,EAAM,CAC5BggB,WAAY7C,EACZha,UAAWhJ,IAET8lB,EAA0B7hB,KAAK2hB,mBAAmB/f,EAAM,CAACmD,UAAWoa,IAE1Enf,KAAK2Q,SAAS,CACZ+Q,uBACAG,4BAGF,MAAM,SAACzmB,GAAY4E,KAAKiC,QAExB,GAAI0c,GAAmB2C,EAAiB,CACtC,MAAM,MAAC9jB,EAAD,OAAQD,GAAUnC,EAClBijB,EAAS1U,KAAKoN,KAAKvZ,EAAQ2L,GAC3BmX,EAAS3W,KAAKoN,KAAKxZ,EAAS4L,GAClCnJ,KAAK8hB,kBAAkBxB,EAAQjC,GAC/Bre,KAAK2Q,SAAS,CAEZoR,QAAS,CAACvkB,EAAQ,GAAID,EAAS,EAAG,GAElCykB,WAAY,CAACC,QAAS9Y,EAAU+Y,QAAS/Y,GACzC3L,QACAD,SACA8gB,SACAiC,UAEH,CAEGuB,GACF7hB,KAAKmiB,iBAAiBvgB,IAEpB8f,GAAwBG,IAC1B7hB,KAAKoiB,eAER,CAKDD,iBAAiBvgB,GACf,MAAM,UAACkd,EAAD,YAAYE,EAAZ,KAAyBjjB,GAAQ6F,EAAK3G,OACtC,MAAC0kB,GAAS3f,KAAKkC,MAAMid,QACvBQ,IACFA,EAAMb,UAAYA,EAClBa,EAAMC,UAAYC,EAAAA,GAAsBb,IAE1Chf,KAAK2Q,SAAS,CAAC0R,UAAUC,EAAAA,EAAAA,IAAatD,EAAaF,EAAW,CAAC/iB,UAChE,CAEDqmB,gBACE,MAAM,MAACzC,GAAS3f,KAAKkC,MAAMid,QACvBQ,IACFA,EAAMsB,gBAAkB,KAE3B,G,OAnNkB5B,EAAAA,YAIA,oB,OAJAA,EAAAA,eAKGhhB,G,iFCzGxB,SAAS8H,EAAkBzB,GACzB,OACE/G,EAAAA,EAAAA,IAAA,OAAKgH,UAAU,mBACbhH,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,0BAA4B,KACrClL,MAAO,GAAG8K,EAAE6D,WAAW,OAAO7D,EAAE6D,WAAW,QAE7C5K,EAAAA,EAAAA,IAACiH,EAAAA,EACC,CACAC,OAAOC,EAAAA,EAAAA,GAAE,UAAY,KACrBlL,MAAO,GAAG8K,EAAEnL,OAAOgpB,eAI3B,CAEM,SAAU/e,EACdjL,EACAuD,EACAe,EACApB,GAEA,MAAMgI,EAAKlL,EACLka,EAAIhP,EAAGG,aACb,IAAI7H,EAAOD,EAAQC,KAAK2H,SAAS0C,KAAKrC,IAAkB,IACnDA,EACHE,MAAO,CAACwO,EAAEvO,EAAGuO,EAAEtO,EAAGsO,EAAErO,EAAG,IAAMqO,EAAEpO,OAWjC,OARIZ,EAAGuD,kBAGLjL,GADoBkL,EAAAA,EAAAA,GAAcxD,EAAGuD,gBAC9BD,CAAYhL,IAKd,IAAIsjB,EAAgB,CACzBrc,GAAI,oBAAoBS,EAAG1G,WAC3BhB,OACA2gB,eAAgBjZ,EAAG2F,UACnB2U,SAAU,CAACtL,EAAEvO,EAAGuO,EAAEtO,EAAGsO,EAAErO,EAAG,GAC1B4Z,SAAU,CAACvL,EAAEvO,EAAGuO,EAAEtO,EAAGsO,EAAErO,EAAG,IAAMqO,EAAEpO,GAClCgF,SAAS,EACTyV,UAAW/a,GAAKA,EAAEkF,QAAU,MACzBxE,EAAAA,EAAAA,GAAiBhB,EAAIhI,EAAY0K,IAExC,CAYA,MAAMqc,EAAoBvnB,IACxB,MAAMC,GAAeC,EAAAA,EAAAA,UAEfwe,GAAsBje,EAAAA,EAAAA,cAAY,KACtC,MAAMgI,EAAWzI,EAAMa,QAAQC,KAAK2H,UAAY,IAE1C,MAAElG,EAAK,OAAED,EAAM,SAAEhF,GAAa0C,EAEpC,OAAI1C,EAASwP,UACJO,EAAAA,EAAAA,GAAYrN,EAAMG,SAAU,CACjCoC,QACAD,SACA2H,QA5EWnJ,EA4EO2H,EA3EjB3H,EAAKqK,KAAIrC,GAAKA,EAAE0F,cA8EdxO,EAAMG,SA/EjB,IAAmBW,CA+EM,GACpB,CAACd,KAEG+e,EAAeC,IAAoB3e,EAAAA,EAAAA,UAASL,EAAMa,QAAQxC,YAC1D8B,EAAUC,IAAeC,EAAAA,EAAAA,UAASqe,MAEzCvc,EAAAA,EAAAA,YAAU,KACJnC,EAAMa,QAAQxC,YAAc0gB,IAC9B3e,EAAYse,KACZM,EAAiBhf,EAAMa,QAAQxC,W,GAEhC,CAACqgB,EAAqB1e,EAAMa,QAAQxC,UAAW0gB,IAElD,MAAMve,GAAaC,EAAAA,EAAAA,cAAaC,IAC9B,MAAM,QAAEC,GAAYV,EAChBU,GACFA,EAAQH,WAAWE,E,GAEpB,IAEGif,GAAYlf,EAAAA,EAAAA,cAAY,IAGrB,CAFO8H,EAASvI,EAAM1C,SAAU0C,EAAMa,QAAO2mB,IAAQhnB,KAG3D,CAACR,EAAM1C,SAAU0C,EAAMa,QAASL,KAE7B,SAAElD,EAAQ,QAAEuD,EAAO,gBAAEwB,GAAoBrC,EAE/C,OACE0C,EAAAA,EAAAA,IAAA,YACEA,EAAAA,EAAAA,IAACC,EAAAA,EAA4B,CAC3BC,IAAK3C,EACLE,SAAUA,EACVqC,OAAQmd,IACRtd,gBAAiBA,EACjBU,SAAUzF,EAAS0F,aACnBH,qBAAsBhC,EAAQC,KAAKgC,aACnCP,MAAOvC,EAAMuC,MACbD,OAAQtC,EAAMsC,SAEZ,EAIV,GAAeY,EAAAA,EAAAA,MAAKqkB,E","sources":["webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/explore.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/safeStringify.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/index.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/Multi/Multi.tsx","webpack://superset/../../../src/arc-layer/arc-layer-vertex.glsl.ts","webpack://superset/../../../src/arc-layer/arc-layer.ts","webpack://superset/../../../src/arc-layer/arc-layer-fragment.glsl.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Arc/Arc.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Grid/Grid.tsx","webpack://superset/./node_modules/d3-hexbin/src/hexbin.js","webpack://superset/../../../src/hexagon-layer/hexagon-layer.ts","webpack://superset/../../../src/hexagon-layer/hexagon-aggregator.js","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Hex/Hex.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Path/Path.tsx","webpack://superset/../../../src/polygon-layer/polygon-layer.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/getPointsFromPolygon.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Polygon/Polygon.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/geo.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Scatter/Scatter.tsx","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer-vertex.glsl.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-cell-layer.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer-fragment.glsl.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport URI from 'urijs';\nimport { JsonObject } from '@superset-ui/core';\nimport { safeStringify } from './safeStringify';\n\nconst MAX_URL_LENGTH = 8000;\n\nexport function getURIDirectory(endpointType = 'base') {\n  // Building the directory part of the URI\n  let directory = '/explore/';\n  if (['json', 'csv', 'query', 'results', 'samples'].includes(endpointType)) {\n    directory = '/superset/explore_json/';\n  }\n\n  return directory;\n}\n\nexport function getExploreLongUrl(\n  formData: JsonObject,\n  endpointType: string,\n  allowOverflow = true,\n  extraSearch = {},\n): string | undefined {\n  if (!formData.datasource) {\n    return undefined;\n  }\n\n  const uri = new URI('/');\n  const directory = getURIDirectory(endpointType);\n  const search = uri.search(true);\n  Object.keys(extraSearch).forEach(key => {\n    search[key] = extraSearch[key];\n  });\n  search.form_data = safeStringify(formData);\n  if (endpointType === 'standalone') {\n    search.standalone = 'true';\n  }\n  const url = uri.directory(directory).search(search).toString();\n  if (!allowOverflow && url.length > MAX_URL_LENGTH) {\n    const minimalFormData = {\n      datasource: formData.datasource,\n      viz_type: formData.viz_type,\n    };\n\n    return getExploreLongUrl(minimalFormData, endpointType, false, {\n      URL_IS_TOO_LONG_TO_SHARE: null,\n    });\n  }\n\n  return url;\n}\n","/* eslint-disable consistent-return */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { JsonObject } from '@superset-ui/core';\n\n/**\n * A Stringify function that will not crash when it runs into circular JSON references,\n * unlike JSON.stringify. Any circular references are simply omitted, as if there had\n * been no data present\n * @param object any JSON object to be stringified\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport function safeStringify(object: JsonObject) {\n  const cache = new Set();\n\n  return JSON.stringify(object, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // We've seen this object before\n        try {\n          // Quick deep copy to duplicate if this is a repeat rather than a circle.\n          return JSON.parse(JSON.stringify(value));\n        } catch (error) {\n          // Discard key if value cannot be duplicated.\n          return;\n        }\n      }\n      // Store the value in our cache.\n      cache.add(value);\n    }\n\n    return value;\n  });\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { getLayer as deck_grid } from './Grid/Grid';\nimport { getLayer as deck_screengrid } from './Screengrid/Screengrid';\nimport { getLayer as deck_path } from './Path/Path';\nimport { getLayer as deck_hex } from './Hex/Hex';\nimport { getLayer as deck_scatter } from './Scatter/Scatter';\nimport { getLayer as deck_geojson } from './Geojson/Geojson';\nimport { getLayer as deck_arc } from './Arc/Arc';\nimport { getLayer as deck_polygon } from './Polygon/Polygon';\n\nconst layerGenerators = {\n  deck_grid,\n  deck_screengrid,\n  deck_path,\n  deck_hex,\n  deck_scatter,\n  deck_geojson,\n  deck_arc,\n  deck_polygon,\n};\n\nexport default layerGenerators;\n","/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { isEqual } from 'lodash';\nimport {\n  Datasource,\n  HandlerFunction,\n  JsonObject,\n  JsonValue,\n  QueryFormData,\n  SupersetClient,\n  usePrevious,\n} from '@superset-ui/core';\nimport { Layer } from 'deck.gl/typed';\n\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../DeckGLContainer';\nimport { getExploreLongUrl } from '../utils/explore';\nimport layerGenerators from '../layers';\nimport { Viewport } from '../utils/fitViewport';\nimport { TooltipProps } from '../components/Tooltip';\n\nexport type DeckMultiProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  onAddFilter: HandlerFunction;\n  height: number;\n  width: number;\n  datasource: Datasource;\n  onSelect: () => void;\n};\n\nconst DeckMulti = (props: DeckMultiProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const [viewport, setViewport] = useState<Viewport>();\n  const [subSlicesLayers, setSubSlicesLayers] = useState<Record<number, Layer>>(\n    {},\n  );\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const loadLayers = useCallback(\n    (formData: QueryFormData, payload: JsonObject, viewport?: Viewport) => {\n      setViewport(viewport);\n      setSubSlicesLayers({});\n      payload.data.slices.forEach(\n        (subslice: { slice_id: number } & JsonObject) => {\n          // Filters applied to multi_deck are passed down to underlying charts\n          // note that dashboard contextual information (filter_immune_slices and such) aren't\n          // taken into consideration here\n          const filters = [\n            ...(subslice.form_data.filters || []),\n            ...(formData.filters || []),\n            ...(formData.extra_filters || []),\n          ];\n          const subsliceCopy = {\n            ...subslice,\n            form_data: {\n              ...subslice.form_data,\n              filters,\n            },\n          };\n\n          const url = getExploreLongUrl(subsliceCopy.form_data, 'json');\n\n          if (url) {\n            SupersetClient.get({\n              endpoint: url,\n            })\n              .then(({ json }) => {\n                const layer = layerGenerators[subsliceCopy.form_data.viz_type](\n                  subsliceCopy.form_data,\n                  json,\n                  props.onAddFilter,\n                  setTooltip,\n                  props.datasource,\n                  [],\n                  props.onSelect,\n                );\n                setSubSlicesLayers(subSlicesLayers => ({\n                  ...subSlicesLayers,\n                  [subsliceCopy.slice_id]: layer,\n                }));\n              })\n              .catch(() => {});\n          }\n        },\n      );\n    },\n    [props.datasource, props.onAddFilter, props.onSelect, setTooltip],\n  );\n\n  const prevDeckSlices = usePrevious(props.formData.deck_slices);\n  useEffect(() => {\n    const { formData, payload } = props;\n    const hasChanges = !isEqual(prevDeckSlices, formData.deck_slices);\n    if (hasChanges) {\n      loadLayers(formData, payload);\n    }\n  }, [loadLayers, prevDeckSlices, props]);\n\n  const { payload, formData, setControlValue, height, width } = props;\n  const layers = Object.values(subSlicesLayers);\n\n  return (\n    <DeckGLContainerStyledWrapper\n      ref={containerRef}\n      mapboxApiAccessToken={payload.data.mapboxApiKey}\n      viewport={viewport || props.viewport}\n      layers={layers}\n      mapStyle={formData.mapbox_style}\n      setControlValue={setControlValue}\n      onViewportChange={setViewport}\n      height={height}\n      width={width}\n    />\n  );\n};\n\nexport default memo(DeckMulti);\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceSourcePositions64Low;\nattribute vec3 instanceTargetPositions;\nattribute vec3 instanceTargetPositions64Low;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\nattribute float instanceHeights;\nattribute float instanceTilts;\n\nuniform bool greatCircle;\nuniform bool useShortestPath;\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform int widthUnits;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nfloat paraboloid(float distance, float sourceZ, float targetZ, float ratio) {\n  // d: distance on the xy plane\n  // r: ratio of the current point\n  // p: ratio of the peak of the arc\n  // h: height multiplier\n  // z = f(r) = sqrt(r * (p * 2 - r)) * d * h\n  // f(0) = 0\n  // f(1) = dz\n\n  float deltaZ = targetZ - sourceZ;\n  float dh = distance * instanceHeights;\n  if (dh == 0.0) {\n    return sourceZ + deltaZ * ratio;\n  }\n  float unitZ = deltaZ / dh;\n  float p2 = unitZ * unitZ + 1.0;\n\n  // sqrt does not deal with negative values, manually flip source and target if delta.z < 0\n  float dir = step(deltaZ, 0.0);\n  float z0 = mix(sourceZ, targetZ, dir);\n  float r = mix(ratio, 1.0 - ratio, dir);\n  return sqrt(r * (p2 - r)) * dh + z0;\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {\n  float distance = length(source.xy - target.xy);\n  float z = paraboloid(distance, source.z, target.z, segmentRatio);\n\n  float tiltAngle = radians(instanceTilts);\n  vec2 tiltDirection = normalize(target.xy - source.xy);\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);\n\n  return vec3(\n    mix(source.xy, target.xy, segmentRatio) + tilt,\n    z * cos(tiltAngle)\n  );\n}\n\n/* Great circle interpolation\n * http://www.movable-type.co.uk/scripts/latlong.html\n */\nfloat getAngularDist (vec2 source, vec2 target) {\n  vec2 sourceRadians = radians(source);\n  vec2 targetRadians = radians(target);\n  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);\n  vec2 shd_sq = sin_half_delta * sin_half_delta;\n\n  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;\n  return 2.0 * asin(sqrt(a));\n}\n\nvec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {\n  vec2 lngLat;\n\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\n  if(abs(angularDist - PI) < 0.001) {\n    lngLat = (1.0 - t) * source.xy + t * target.xy;\n  } else {\n    float a = sin((1.0 - t) * angularDist);\n    float b = sin(t * angularDist);\n    vec3 p = source3D.yxz * a + target3D.yxz * b;\n    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));\n  }\n\n  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);\n\n  return vec3(lngLat, z);\n}\n\n/* END GREAT CIRCLE */\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));\n  float nextSegmentRatio = getSegmentRatio(min(numSegments - 1.0, segmentIndex + 1.0));\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  isValid = 1.0;\n\n  uv = vec2(segmentRatio, positions.y);\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  vec4 curr;\n  vec4 next;\n  vec3 source;\n  vec3 target;\n\n  if ((greatCircle || project_uProjectionMode == PROJECTION_MODE_GLOBE) && project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));\n    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));\n    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);\n\n    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);\n    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);\n    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);\n\n    if (abs(currPos.x - prevPos.x) > 180.0) {\n      indexDir = -1.0;\n      isValid = 0.0;\n    } else if (abs(currPos.x - nextPos.x) > 180.0) {\n      indexDir = 1.0;\n      isValid = 0.0;\n    }\n    nextPos = indexDir < 0.0 ? prevPos : nextPos;\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n\n    if (isValid == 0.0) {\n      // split at the 180th meridian\n      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;\n      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);\n      currPos = mix(currPos, nextPos, t);\n      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);\n    }\n\n    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);\n    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);\n  \n    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);\n    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\n  \n  } else {\n    vec3 source_world = instanceSourcePositions;\n    vec3 target_world = instanceTargetPositions;\n    if (useShortestPath) {\n      source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n      target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n\n      float deltaLng = target_world.x - source_world.x;\n      if (deltaLng > 180.) target_world.x -= 360.;\n      if (deltaLng < -180.) source_world.x -= 360.;\n    }\n    source = project_position(source_world, instanceSourcePositions64Low);\n    target = project_position(target_world, instanceTargetPositions64Low);\n\n    // common x at longitude=-180\n    float antiMeridianX = 0.0;\n\n    if (useShortestPath) {\n      if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n        antiMeridianX = -(project_uCoordinateOrigin.x + 180.) / 360. * TILE_SIZE;\n      }\n      float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);\n\n      if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {\n        isValid = 0.0;\n        indexDir = sign(segmentRatio - thresholdRatio);\n        segmentRatio = thresholdRatio;\n      }\n    }\n\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n    vec3 currPos = interpolateFlat(source, target, segmentRatio);\n    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);\n\n    if (useShortestPath) {\n      if (nextPos.x < antiMeridianX) {\n        currPos.x += TILE_SIZE;\n        nextPos.x += TILE_SIZE;\n      }\n    }\n\n    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\n    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\n    geometry.position = vec4(currPos, 1.0);\n  }\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(curr, geometry);\n  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);\n  vColor = vec4(color.rgb, color.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    // Re-generate model if geometry changed\n    if (opts.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    let positions: number[] = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid == 0.0) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n  geometry.uv = uv;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ArcLayer } from 'deck.gl/typed';\nimport React from 'react';\nimport {\n  HandlerFunction,\n  JsonObject,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { TooltipProps } from '../../components/Tooltip';\nimport { Point } from '../../types';\n\nfunction getPoints(data: JsonObject[]) {\n  const points: Point[] = [];\n  data.forEach(d => {\n    points.push(d.sourcePosition);\n    points.push(d.targetPosition);\n  });\n\n  return points;\n}\n\nfunction setTooltipContent(formData: QueryFormData) {\n  return (o: JsonObject) => (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Start (Longitude, Latitude): ')}\n        value={`${o.object.sourcePosition[0]}, ${o.object.sourcePosition[1]}`}\n      />\n      <TooltipRow\n        label={t('End (Longitude, Latitude): ')}\n        value={`${o.object.targetPosition[0]}, ${o.object.targetPosition[1]}`}\n      />\n      {formData.dimension && (\n        <TooltipRow\n          label={`${formData.dimension}: `}\n          value={`${o.object.cat_color}`}\n        />\n      )}\n    </div>\n  );\n}\n\nexport function getLayer(\n  fd: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const data = payload.data.features;\n  const sc = fd.color_picker;\n  const tc = fd.target_color_picker;\n\n  return new ArcLayer({\n    data,\n    getSourceColor: d =>\n      d.sourceColor || d.color || [sc.r, sc.g, sc.b, 255 * sc.a],\n    getTargetColor: d =>\n      d.targetColor || d.color || [tc.r, tc.g, tc.b, 255 * tc.a],\n    id: `path-layer-${fd.slice_id}` as const,\n    strokeWidth: fd.stroke_width ? fd.stroke_width : 3,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent(fd)),\n  });\n}\n\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { memo, useCallback, useMemo, useRef } from 'react';\nimport { GeoJsonLayer } from 'deck.gl/typed';\nimport geojsonExtent from '@mapbox/geojson-extent';\nimport {\n  HandlerFunction,\n  JsonObject,\n  JsonValue,\n  QueryFormData,\n} from '@superset-ui/core';\n\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport { TooltipProps } from '../../components/Tooltip';\n\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth',\n};\n\nconst alterProps = (props: JsonObject, propOverrides: JsonObject) => {\n  const newProps: JsonObject = {};\n  Object.keys(props).forEach(k => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n\n  return {\n    ...newProps,\n    ...propOverrides,\n  };\n};\nlet features: JsonObject[];\nconst recurseGeoJson = (\n  node: JsonObject,\n  propOverrides: JsonObject,\n  extraProps?: JsonObject,\n) => {\n  if (node?.features) {\n    node.features.forEach((obj: JsonObject) => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node?.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides),\n    } as JsonObject;\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    o.object.extraProps && (\n      <div className=\"deckgl-tooltip\">\n        {Object.keys(o.object.extraProps).map((prop, index) => (\n          <TooltipRow\n            key={`prop-${index}`}\n            label={`${prop}: `}\n            value={`${o.object.extraProps[prop]}`}\n          />\n        ))}\n      </div>\n    )\n  );\n}\n\nconst getFillColor = (feature: JsonObject) => feature?.properties?.fillColor;\nconst getLineColor = (feature: JsonObject) => feature?.properties?.strokeColor;\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides: JsonObject = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n\n  let jsFnMutator;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    features = jsFnMutator(features);\n  }\n\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}` as const,\n    data: features,\n    extruded: fd.extruded,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getFillColor,\n    getLineColor,\n    getLineWidth: fd.line_width || 1,\n    pointRadiusScale: fd.point_radius_scale,\n    lineWidthUnits: fd.line_width_unit,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nexport type DeckGLGeoJsonProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  onAddFilter: HandlerFunction;\n  height: number;\n  width: number;\n};\n\nconst DeckGLGeoJson = (props: DeckGLGeoJsonProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const { formData, payload, setControlValue, onAddFilter, height, width } =\n    props;\n\n  const viewport: Viewport = useMemo(() => {\n    if (formData.autozoom) {\n      const points =\n        payload?.data?.features?.reduce?.(\n          (acc: [number, number, number, number][], feature: any) => {\n            const bounds = geojsonExtent(feature);\n            if (bounds) {\n              return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n            }\n\n            return acc;\n          },\n          [],\n        ) || [];\n\n      if (points.length) {\n        return fitViewport(props.viewport, {\n          width,\n          height,\n          points,\n        });\n      }\n    }\n    return props.viewport;\n  }, [\n    formData.autozoom,\n    height,\n    payload?.data?.features,\n    props.viewport,\n    width,\n  ]);\n\n  const layer = getLayer(formData, payload, onAddFilter, setTooltip);\n\n  return (\n    <DeckGLContainerStyledWrapper\n      ref={containerRef}\n      mapboxApiAccessToken={payload.data.mapboxApiKey}\n      viewport={viewport}\n      layers={[layer]}\n      mapStyle={formData.mapbox_style}\n      setControlValue={setControlValue}\n      height={height}\n      width={width}\n    />\n  );\n};\n\nexport default memo(DeckGLGeoJson);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Color, GridLayer } from 'deck.gl/typed';\nimport React from 'react';\nimport {\n  t,\n  CategoricalColorNamespace,\n  JsonObject,\n  QueryFormData,\n} from '@superset-ui/core';\n\nimport { commonLayerProps, getAggFunc } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Longitude and Latitude') + ': '}\n        value={`${o.coordinate[0]}, ${o.coordinate[1]}`}\n      />\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Height') + ': '}\n        value={`${o.object.elevationValue}`}\n      />\n    </div>\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const colorScale = CategoricalColorNamespace.getScale(fd.color_scheme);\n  const colorRange = colorScale\n    .range()\n    .map(color => hexToRGB(color)) as Color[];\n  let data = payload.data.features;\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  const aggFunc = getAggFunc(fd.js_agg_function, p => p.weight);\n\n  return new GridLayer({\n    id: `grid-layer-${fd.slice_id}` as const,\n    data,\n    cellSize: fd.grid_size,\n    extruded: fd.extruded,\n    colorRange,\n    outline: false,\n    // @ts-ignore\n    getElevationValue: aggFunc,\n    // @ts-ignore\n    getColorValue: aggFunc,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n","var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  log,\n  Position,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\n\nimport GL from '@luma.gl/constants';\nimport {AggregateAccessor} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n\nconst defaultProps: DefaultProps<HexagonLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\n/** All properties supported by by HexagonLayer. */\nexport type HexagonLayerProps<DataT = any> = _HexagonLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\n/** Properties added by HexagonLayer. */\ntype _HexagonLayerProps<DataT = any> = {\n  /**\n   * Radius of hexagon bin in meters. The hexagons are pointy-topped (rather than flat-topped).\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Function to aggregate data into hexagonal bins.\n   * @default d3-hexbin\n   */\n  hexagonAggregator?: (props: any, params: any) => any;\n\n  /**\n   * Color scale input domain.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Hexagon radius multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain. The elevation scale is a linear scale that maps number of counts to elevation.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Hexagon elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Filter bins and re-calculate color by `upperPercentile`.\n   * Hexagons with color value larger than the `upperPercentile` will be hidden.\n   * @default 100\n   */\n  upperPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate color by `lowerPercentile`.\n   * Hexagons with color value smaller than the `lowerPercentile` will be hidden.\n   * @default 0\n   */\n  lowerPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate elevation by `elevationUpperPercentile`.\n   * Hexagons with elevation value larger than the `elevationUpperPercentile` will be hidden.\n   * @default 100\n   */\n  elevationUpperPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate elevation by `elevationLowerPercentile`.\n   * Hexagons with elevation value larger than the `elevationLowerPercentile` will be hidden.\n   * @default 0\n   */\n  elevationLowerPercentile?: number;\n\n  /**\n   * Scaling function used to determine the color of the grid cell, default value is 'quantize'.\n   * Supported Values are 'quantize', 'quantile' and 'ordinal'.\n   * @default 'quantize'\n   */\n  colorScaleType?: 'quantize' | 'quantile' | 'ordinal';\n\n  /**\n   * Scaling function used to determine the elevation of the grid cell, only supports 'linear'.\n   */\n  elevationScaleType?: 'linear';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a bin.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into bins, this accessor is called on each cell to get the value that its color is based on.\n   * @default null\n   */\n  getColorValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a bin.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into bins, this accessor is called on each cell to get the value that its elevation is based on.\n   * @default null\n   */\n  getElevationValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * This callback will be called when cell color domain has been calculated.\n   * @default () => {}\n   */\n  onSetColorDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * This callback will be called when cell elevation domain has been calculated.\n   * @default () => {}\n   */\n  onSetElevationDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * (Experimental) Filter data objects\n   */\n  _filterData: null | ((d: DataT) => boolean);\n};\n\n/** Aggregates data into a hexagon-based heatmap. The color and height of a hexagon are determined based on the objects it contains. */\nexport default class HexagonLayer<DataT, ExtraPropsT extends {} = {}> extends AggregationLayer<\n  DataT,\n  ExtraPropsT & Required<_HexagonLayerProps>\n> {\n  static layerName = 'HexagonLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer<DataT>['state'] & {\n    cpuAggregator: CPUAggregator;\n    aggregatorState: any;\n  };\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HexagonLayer, Color } from 'deck.gl/typed';\nimport React from 'react';\nimport {\n  t,\n  CategoricalColorNamespace,\n  QueryFormData,\n  JsonObject,\n} from '@superset-ui/core';\n\nimport { commonLayerProps, getAggFunc } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Centroid (Longitude and Latitude): ')}\n        value={`(${o.coordinate[0]}, ${o.coordinate[1]})`}\n      />\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Height') + ': '}\n        value={`${o.object.elevationValue}`}\n      />\n    </div>\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const colorScale = CategoricalColorNamespace.getScale(fd.color_scheme);\n  const colorRange = colorScale\n    .range()\n    .map(color => hexToRGB(color)) as Color[];\n  let data = payload.data.features;\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n  const aggFunc = getAggFunc(fd.js_agg_function, p => p?.weight);\n\n  return new HexagonLayer({\n    id: `hex-layer-${fd.slice_id}` as const,\n    data,\n    radius: fd.grid_size,\n    extruded: fd.extruded,\n    colorRange,\n    outline: false,\n    // @ts-ignore\n    getElevationValue: aggFunc,\n    // @ts-ignore\n    getColorValue: aggFunc,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n","/* eslint-disable react/no-array-index-key */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { PathLayer } from 'deck.gl/typed';\nimport { JsonObject, QueryFormData } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { TooltipProps } from '../../components/Tooltip';\nimport { Point } from '../../types';\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    o.object.extraProps && (\n      <div className=\"deckgl-tooltip\">\n        {Object.keys(o.object.extraProps).map((prop, index) => (\n          <TooltipRow\n            key={`prop-${index}`}\n            label={`${prop}: `}\n            value={`${o.object.extraProps[prop]}`}\n          />\n        ))}\n      </div>\n    )\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const c = fd.color_picker;\n  const fixedColor = [c.r, c.g, c.b, 255 * c.a];\n  let data = payload.data.features.map((feature: JsonObject) => ({\n    ...feature,\n    path: feature.path,\n    width: fd.line_width,\n    color: fixedColor,\n  }));\n\n  if (fd.js_data_mutator) {\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  return new PathLayer({\n    id: `path-layer-${fd.slice_id}` as const,\n    getColor: d => d.color,\n    getPath: d => d.path,\n    getWidth: d => d.width,\n    data,\n    rounded: true,\n    widthScale: 1,\n    widthUnits: fd.line_width_unit,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nfunction getPoints(data: JsonObject[]) {\n  let points: Point[] = [];\n  data.forEach(d => {\n    points = points.concat(d.path);\n  });\n\n  return points;\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n","/* eslint-disable no-negated-condition */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent } from 'd3-array';\nimport { ScaleLinear, ScaleThreshold, scaleThreshold } from 'd3-scale';\nimport {\n  getSequentialSchemeRegistry,\n  JsonObject,\n  QueryFormData,\n  SequentialScheme,\n} from '@superset-ui/core';\nimport { isNumber } from 'lodash';\nimport { hexToRGB } from './utils/colors';\n\nconst DEFAULT_NUM_BUCKETS = 10;\n\nexport type Buckets = {\n  break_points: string[];\n  num_buckets: string;\n};\n\nexport type BucketsWithColorScale = Buckets & {\n  linear_color_scheme: string | string[];\n  opacity: number;\n};\n\nexport function getBreakPoints(\n  {\n    break_points: formDataBreakPoints,\n    num_buckets: formDataNumBuckets,\n  }: Buckets,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  if (!features) {\n    return [];\n  }\n  if (formDataBreakPoints === undefined || formDataBreakPoints.length === 0) {\n    // compute evenly distributed break points based on number of buckets\n    const numBuckets = formDataNumBuckets\n      ? parseInt(formDataNumBuckets, 10)\n      : DEFAULT_NUM_BUCKETS;\n    const [minValue, maxValue] = extent<JsonObject, number>(\n      features,\n      accessor,\n    ).map((value: number | string | undefined) =>\n      typeof value === 'string' ? parseFloat(value) : value,\n    );\n    if (minValue === undefined || maxValue === undefined) {\n      return [];\n    }\n    const delta = (maxValue - minValue) / numBuckets;\n    const precision =\n      delta === 0 ? 0 : Math.max(0, Math.ceil(Math.log10(1 / delta)));\n    const extraBucket =\n      maxValue > parseFloat(maxValue.toFixed(precision)) ? 1 : 0;\n    const startValue =\n      minValue < parseFloat(minValue.toFixed(precision))\n        ? minValue - 1\n        : minValue;\n\n    return new Array(numBuckets + 1 + extraBucket)\n      .fill(0)\n      .map((_, i) => (startValue + i * delta).toFixed(precision));\n  }\n\n  return formDataBreakPoints.sort(\n    (a: string, b: string) => parseFloat(a) - parseFloat(b),\n  );\n}\n\nexport function getBreakPointColorScaler(\n  {\n    break_points: formDataBreakPoints,\n    num_buckets: formDataNumBuckets,\n    linear_color_scheme: linearColorScheme,\n    opacity,\n  }: BucketsWithColorScale,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  const breakPoints =\n    formDataBreakPoints || formDataNumBuckets\n      ? getBreakPoints(\n          {\n            break_points: formDataBreakPoints,\n            num_buckets: formDataNumBuckets,\n          },\n          features,\n          accessor,\n        )\n      : null;\n  const colorScheme = Array.isArray(linearColorScheme)\n    ? new SequentialScheme({\n        colors: linearColorScheme,\n        id: 'custom',\n      })\n    : getSequentialSchemeRegistry().get(linearColorScheme);\n\n  if (!colorScheme) {\n    return null;\n  }\n  let scaler: ScaleLinear<string, string> | ScaleThreshold<number, string>;\n  let maskPoint: (v: number | undefined) => boolean;\n  if (breakPoints !== null) {\n    // bucket colors into discrete colors\n    const n = breakPoints.length - 1;\n    const bucketedColors =\n      n > 1\n        ? colorScheme.getColors(n)\n        : [colorScheme.colors[colorScheme.colors.length - 1]];\n\n    // repeat ends\n    const first = bucketedColors[0];\n    const last = bucketedColors[bucketedColors.length - 1];\n    bucketedColors.unshift(first);\n    bucketedColors.push(last);\n\n    const points = breakPoints.map(parseFloat);\n    scaler = scaleThreshold<number, string>()\n      .domain(points)\n      .range(bucketedColors);\n    maskPoint = value => !!value && (value > points[n] || value < points[0]);\n  } else {\n    // interpolate colors linearly\n    const linearScaleDomain = extent(features, accessor);\n    if (!linearScaleDomain.some(isNumber)) {\n      scaler = colorScheme.createLinearScale();\n    } else {\n      scaler = colorScheme.createLinearScale(\n        extent(features, accessor) as number[],\n      );\n    }\n    maskPoint = () => false;\n  }\n\n  return (d: JsonObject): [number, number, number, number] => {\n    const v = accessor(d);\n    if (!v) {\n      return [0, 0, 0, 0];\n    }\n    const c = hexToRGB(scaler(v));\n    if (maskPoint(v)) {\n      c[3] = 0;\n    } else {\n      c[3] = (opacity / 100) * 255;\n    }\n\n    return c;\n  };\n}\n\nexport function getBuckets(\n  fd: QueryFormData & BucketsWithColorScale,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  const breakPoints = getBreakPoints(fd, features, accessor);\n  const colorScaler = getBreakPointColorScaler(fd, features, accessor);\n  const buckets = {};\n  breakPoints.slice(1).forEach((value, i) => {\n    const range = `${breakPoints[i]} - ${breakPoints[i + 1]}`;\n    const mid =\n      0.5 * (parseFloat(breakPoints[i]) + parseFloat(breakPoints[i + 1]));\n    // fix polygon doesn't show\n    const metricLabel = fd.metric ? fd.metric.label || fd.metric : null;\n    buckets[range] = {\n      color: colorScaler?.({ [metricLabel || fd.metric]: mid }),\n      enabled: true,\n    };\n  });\n\n  return buckets;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Point } from '../types';\n\n/** Format originally used by the Polygon plugin */\ntype CustomPolygonFeature = {\n  polygon: Point[];\n};\n\n/**\n * Format that is geojson standard\n * https://geojson.org/geojson-spec.html\n */\ntype GeojsonPolygonFeature = {\n  polygon: {\n    type: 'Feature';\n    geometry: {\n      type: 'Polygon';\n      coordinates: Point[][];\n    };\n  };\n};\n\nexport default function getPointsFromPolygon(\n  feature: CustomPolygonFeature | GeojsonPolygonFeature,\n) {\n  return 'geometry' in feature.polygon\n    ? feature.polygon.geometry.coordinates[0]\n    : feature.polygon;\n}\n","/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/no-access-state-in-setstate */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\n\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  HandlerFunction,\n  JsonObject,\n  JsonValue,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\n\nimport { PolygonLayer } from 'deck.gl/typed';\n\nimport Legend from '../../components/Legend';\nimport TooltipRow from '../../TooltipRow';\nimport { getBuckets, getBreakPointColorScaler } from '../../utils';\n\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport getPointsFromPolygon from '../../utils/getPointsFromPolygon';\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { TooltipProps } from '../../components/Tooltip';\n\nconst DOUBLE_CLICK_THRESHOLD = 250; // milliseconds\n\nfunction getElevation(\n  d: JsonObject,\n  colorScaler: (d: JsonObject) => [number, number, number, number],\n) {\n  /* in deck.gl 5.3.4 (used in Superset as of 2018-10-24), if a polygon has\n   * opacity zero it will make everything behind it have opacity zero,\n   * effectively showing the map layer no matter what other polygons are\n   * behind it.\n   */\n  return colorScaler(d)[3] === 0 ? 0 : d.elevation;\n}\n\nfunction setTooltipContent(formData: PolygonFormData) {\n  return (o: JsonObject) => {\n    const metricLabel = formData.metric.label || formData.metric;\n\n    return (\n      <div className=\"deckgl-tooltip\">\n        {o.object.name && (\n          <TooltipRow\n            // eslint-disable-next-line prefer-template\n            label={t('name') + ': '}\n            value={`${o.object.name}`}\n          />\n        )}\n        {o.object[formData.line_column] && (\n          <TooltipRow\n            label={`${formData.line_column}: `}\n            value={`${o.object[formData.line_column]}`}\n          />\n        )}\n        {formData.metric && (\n          <TooltipRow\n            label={`${metricLabel}: `}\n            value={`${o.object[metricLabel]}`}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nexport function getLayer(\n  formData: PolygonFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  selected: JsonObject[],\n  onSelect: (value: JsonValue) => void,\n) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  let data = [...payload.data.features];\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  const metricLabel = fd.metric ? fd.metric.label || fd.metric : null;\n  const accessor = (d: JsonObject) => d[metricLabel];\n  // base color for the polygons\n  const baseColorScaler =\n    fd.metric === null\n      ? () => [fc.r, fc.g, fc.b, 255 * fc.a]\n      : getBreakPointColorScaler(fd, data, accessor);\n\n  // when polygons are selected, reduce the opacity of non-selected polygons\n  const colorScaler = (d: JsonObject): [number, number, number, number] => {\n    const baseColor = (baseColorScaler?.(d) as [\n      number,\n      number,\n      number,\n      number,\n    ]) || [0, 0, 0, 0];\n    if (selected.length > 0 && !selected.includes(d[fd.line_column])) {\n      baseColor[3] /= 2;\n    }\n\n    return baseColor;\n  };\n\n  const tooltipContentGenerator =\n    fd.line_column &&\n    fd.metric &&\n    ['json', 'geohash', 'zipcode'].includes(fd.line_type)\n      ? setTooltipContent(fd)\n      : () => null;\n\n  return new PolygonLayer({\n    id: `path-layer-${fd.slice_id}` as const,\n    data,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getPolygon: getPointsFromPolygon,\n    getFillColor: colorScaler,\n    getLineColor: [sc.r, sc.g, sc.b, 255 * sc.a],\n    getLineWidth: fd.line_width,\n    extruded: fd.extruded,\n    lineWidthUnits: fd.line_width_unit,\n    getElevation: d => getElevation(d, colorScaler),\n    elevationScale: fd.multiplier,\n    fp64: true,\n    ...commonLayerProps(fd, setTooltip, tooltipContentGenerator, onSelect),\n  });\n}\n\nexport type PolygonFormData = QueryFormData & {\n  break_points: string[];\n  num_buckets: string;\n  linear_color_scheme: string | string[];\n  opacity: number;\n};\nexport type DeckGLPolygonProps = {\n  formData: PolygonFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  onAddFilter: HandlerFunction;\n  width: number;\n  height: number;\n};\n\nconst DeckGLPolygon = (props: DeckGLPolygonProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const getAdjustedViewport = useCallback(() => {\n    let viewport = { ...props.viewport };\n    if (props.formData.autozoom) {\n      const features = props.payload.data.features || [];\n      viewport = fitViewport(viewport, {\n        width: props.width,\n        height: props.height,\n        points: features.flatMap(getPointsFromPolygon),\n      });\n    }\n    if (viewport.zoom < 0) {\n      viewport.zoom = 0;\n    }\n    return viewport;\n  }, [props]);\n\n  const [lastClick, setLastClick] = useState(0);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [selected, setSelected] = useState<JsonObject[]>([]);\n\n  useEffect(() => {\n    const { payload } = props;\n\n    if (payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setSelected([]);\n      setLastClick(0);\n      setStateFormData(payload.form_data);\n    }\n  }, [getAdjustedViewport, props, stateFormData, viewport]);\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const onSelect = useCallback(\n    (polygon: JsonObject) => {\n      const { formData, onAddFilter } = props;\n\n      const now = new Date().getDate();\n      const doubleClick = now - lastClick <= DOUBLE_CLICK_THRESHOLD;\n\n      // toggle selected polygons\n      const selectedCopy = [...selected];\n      if (doubleClick) {\n        selectedCopy.splice(0, selectedCopy.length, polygon);\n      } else if (formData.toggle_polygons) {\n        const i = selectedCopy.indexOf(polygon);\n        if (i === -1) {\n          selectedCopy.push(polygon);\n        } else {\n          selectedCopy.splice(i, 1);\n        }\n      } else {\n        selectedCopy.splice(0, 1, polygon);\n      }\n\n      setSelected(selectedCopy);\n      setLastClick(now);\n      if (formData.table_filter) {\n        onAddFilter(formData.line_column, selected, false, true);\n      }\n    },\n    [lastClick, props, selected],\n  );\n\n  const getLayers = useCallback(() => {\n    if (props.payload.data.features === undefined) {\n      return [];\n    }\n\n    const layer = getLayer(\n      props.formData,\n      props.payload,\n      props.onAddFilter,\n      setTooltip,\n      selected,\n      onSelect,\n    );\n\n    return [layer];\n  }, [\n    onSelect,\n    props.formData,\n    props.onAddFilter,\n    props.payload,\n    selected,\n    setTooltip,\n  ]);\n\n  const { payload, formData, setControlValue } = props;\n\n  const metricLabel = formData.metric\n    ? formData.metric.label || formData.metric\n    : null;\n  const accessor = (d: JsonObject) => d[metricLabel];\n\n  const buckets = getBuckets(formData, payload.data.features, accessor);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <DeckGLContainerStyledWrapper\n        ref={containerRef}\n        viewport={viewport}\n        layers={getLayers()}\n        setControlValue={setControlValue}\n        mapStyle={formData.mapbox_style}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        width={props.width}\n        height={props.height}\n      />\n\n      {formData.metric !== null && (\n        <Legend\n          categories={buckets}\n          position={formData.legend_position}\n          format={formData.legend_format}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(DeckGLPolygon);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport type Unit =\n  | 'square_m'\n  | 'radius_m'\n  | 'radius_km'\n  | 'radius_miles'\n  | 'square_km'\n  | 'square_miles';\n\nexport const defaultViewport = {\n  bearing: 0,\n  latitude: 31.222656842808707,\n  longitude: 6.85236157047845,\n  pitch: 0,\n  zoom: 1,\n};\n\nconst METER_TO_MILE = 1609.34;\n\nexport function unitToRadius(unit: Unit, num: number) {\n  if (unit === 'square_m') {\n    return Math.sqrt(num / Math.PI);\n  }\n  if (unit === 'radius_m') {\n    return num;\n  }\n  if (unit === 'radius_km') {\n    return num * 1000;\n  }\n  if (unit === 'radius_miles') {\n    return num * METER_TO_MILE;\n  }\n  if (unit === 'square_km') {\n    return Math.sqrt(num / Math.PI) * 1000;\n  }\n  if (unit === 'square_miles') {\n    return Math.sqrt(num / Math.PI) * METER_TO_MILE;\n  }\n\n  return null;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ScatterplotLayer } from 'deck.gl/typed';\nimport React from 'react';\nimport {\n  Datasource,\n  getMetricLabel,\n  JsonObject,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { unitToRadius } from '../../utils/geo';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nfunction setTooltipContent(\n  formData: QueryFormData,\n  verboseMap?: Record<string, string>,\n) {\n  return (o: JsonObject) => {\n    const label =\n      verboseMap?.[formData.point_radius_fixed.value] ||\n      getMetricLabel(formData.point_radius_fixed?.value);\n    return (\n      <div className=\"deckgl-tooltip\">\n        <TooltipRow\n          // eslint-disable-next-line prefer-template\n          label={t('Longitude and Latitude') + ': '}\n          value={`${o.object.position[0]}, ${o.object.position[1]}`}\n        />\n        {o.object.cat_color && (\n          <TooltipRow\n            // eslint-disable-next-line prefer-template\n            label={t('Category') + ': '}\n            value={`${o.object.cat_color}`}\n          />\n        )}\n        {o.object.metric && (\n          <TooltipRow label={`${label}: `} value={`${o.object.metric}`} />\n        )}\n      </div>\n    );\n  };\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  datasource: Datasource,\n) {\n  const fd = formData;\n  const dataWithRadius = payload.data.features.map((d: JsonObject) => {\n    let radius = unitToRadius(fd.point_unit, d.radius) || 10;\n    if (fd.multiplier) {\n      radius *= fd.multiplier;\n    }\n    if (d.color) {\n      return { ...d, radius };\n    }\n    const c = fd.color_picker || { r: 0, g: 0, b: 0, a: 1 };\n    const color = [c.r, c.g, c.b, c.a * 255];\n\n    return { ...d, radius, color };\n  });\n\n  return new ScatterplotLayer({\n    id: `scatter-layer-${fd.slice_id}` as const,\n    data: dataWithRadius,\n    fp64: true,\n    getFillColor: d => d.color,\n    getRadius: d => d.radius,\n    radiusMinPixels: Number(fd.min_radius) || undefined,\n    radiusMaxPixels: Number(fd.max_radius) || undefined,\n    stroked: false,\n    ...commonLayerProps(\n      fd,\n      setTooltip,\n      setTooltipContent(fd, datasource?.verboseMap),\n    ),\n  });\n}\n\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\n\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n`;\n","// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> & LayerProps;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* fragment shader for the grid-layer */\nexport default `\\\n#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  GetPickingInfoParams,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  PickingInfo,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {Texture2D} from '@luma.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps: DefaultProps<ScreenGridLayerProps> = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ScreenGridLayer. */\nexport type ScreenGridLayerProps<DataT = any> = _ScreenGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ScreenGridLayer. */\nexport type _ScreenGridLayerProps<DataT> = {\n  /**\n   * Unit width/height of the bins.\n   * @default 100\n   */\n  cellSizePixels?: number;\n\n  /**\n   * Cell margin size in pixels.\n   * @default 2\n   */\n  cellMarginPixels?: number;\n\n  /**\n   * Expressed as an rgba array, minimal color that could be rendered by a tile.\n   * @default [0, 0, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  minColor?: Color | null;\n\n  /**\n   * Expressed as an rgba array, maximal color that could be rendered by a tile.\n   * @default [0, 255, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  maxColor?: Color | null;\n\n  /**\n   * Color scale input domain. The color scale maps continues numeric domain into discrete color range.\n   * @default [1, max(weight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n\n  /**\n   * Perform aggregation is performed on GPU.\n   *\n   * NOTE: GPU Aggregation requires WebGL2 support by the browser.\n   * When `gpuAggregation` is set to true and browser doesn't support WebGL2, aggregation falls back to CPU.\n   *\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n};\n\n/** Aggregates data into histogram bins and renders them as a grid. */\nexport default class ScreenGridLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraProps & Required<_ScreenGridLayerProps<DataT>>> {\n  static layerName = 'ScreenGridLayer';\n  static defaultProps = defaultProps;\n\n  state!: GridAggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    gpuGridAggregator?: any;\n    gpuAggregation?: any;\n    weights?: any;\n    maxTexture?: Texture2D;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS,\n      // @ts-expect-error\n      getCellSize: props => props.cellSizePixels // TODO\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n","/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\n\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenGridLayer } from 'deck.gl/typed';\nimport { JsonObject, JsonValue, QueryFormData, t } from '@superset-ui/core';\nimport { noop } from 'lodash';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\n// eslint-disable-next-line import/extensions\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Longitude and Latitude') + ': '}\n        value={`${o.coordinate[0]}, ${o.coordinate[1]}`}\n      />\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Weight') + ': '}\n        value={`${o.object.cellWeight}`}\n      />\n    </div>\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const c = fd.color_picker;\n  let data = payload.data.features.map((d: JsonObject) => ({\n    ...d,\n    color: [c.r, c.g, c.b, 255 * c.a],\n  }));\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  // Passing a layer creator function instead of a layer since the\n  // layer needs to be regenerated at each render\n  return new ScreenGridLayer({\n    id: `screengrid-layer-${fd.slice_id}` as const,\n    data,\n    cellSizePixels: fd.grid_size,\n    minColor: [c.r, c.g, c.b, 0],\n    maxColor: [c.r, c.g, c.b, 255 * c.a],\n    outline: false,\n    getWeight: d => d.weight || 0,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nexport type DeckGLScreenGridProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  width: number;\n  height: number;\n  onAddFilter: () => void;\n};\n\nconst DeckGLScreenGrid = (props: DeckGLScreenGridProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const getAdjustedViewport = useCallback(() => {\n    const features = props.payload.data.features || [];\n\n    const { width, height, formData } = props;\n\n    if (formData.autozoom) {\n      return fitViewport(props.viewport, {\n        width,\n        height,\n        points: getPoints(features),\n      });\n    }\n    return props.viewport;\n  }, [props]);\n\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n    }\n  }, [getAdjustedViewport, props.payload.form_data, stateFormData]);\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const getLayers = useCallback(() => {\n    const layer = getLayer(props.formData, props.payload, noop, setTooltip);\n\n    return [layer];\n  }, [props.formData, props.payload, setTooltip]);\n\n  const { formData, payload, setControlValue } = props;\n\n  return (\n    <div>\n      <DeckGLContainerStyledWrapper\n        ref={containerRef}\n        viewport={viewport}\n        layers={getLayers()}\n        setControlValue={setControlValue}\n        mapStyle={formData.mapbox_style}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        width={props.width}\n        height={props.height}\n      />\n    </div>\n  );\n};\n\nexport default memo(DeckGLScreenGrid);\n"],"names":["getExploreLongUrl","formData","endpointType","allowOverflow","extraSearch","datasource","uri","URI","directory","includes","getURIDirectory","search","Object","keys","forEach","key","form_data","object","cache","Set","JSON","stringify","value","has","parse","error","add","safeStringify","standalone","url","toString","length","viz_type","URL_IS_TOO_LONG_TO_SHARE","deck_grid","deck_screengrid","deck_path","deck_hex","deck_scatter","deck_geojson","deck_arc","deck_polygon","DeckMulti","props","containerRef","useRef","viewport","setViewport","useState","subSlicesLayers","setSubSlicesLayers","setTooltip","useCallback","tooltip","current","loadLayers","payload","data","slices","subslice","filters","extra_filters","subsliceCopy","SupersetClient","get","endpoint","then","_ref","json","layer","layerGenerators","onAddFilter","onSelect","slice_id","catch","prevDeckSlices","usePrevious","deck_slices","useEffect","_isEqual","setControlValue","height","width","layers","values","___EmotionJSX","DeckGLContainerStyledWrapper","ref","mapboxApiAccessToken","mapboxApiKey","mapStyle","mapbox_style","onViewportChange","memo","DEFAULT_COLOR","defaultProps","getSourcePosition","type","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","Layer","constructor","arguments","_defineProperty","getBounds","_this$getAttributeMan","this","getAttributeManager","getShaders","super","vs","fs","modules","project32","picking","wrapLongitude","initializeState","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","colorFormat","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","opts","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","UNIT","useShortestPath","positions","i","concat","Model","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","numSegments","getLayer","fd","features","sc","color_picker","tc","target_color_picker","d","sourceColor","color","r","g","b","a","targetColor","strokeWidth","stroke_width","commonLayerProps","o","className","TooltipRow","label","t","dimension","cat_color","createCategoricalDeckGLComponent","points","push","propertyMap","fillColor","fill","strokeColor","alterProps","propOverrides","newProps","k","hexToRGB","recurseGeoJson","node","extraProps","obj","newNode","properties","setTooltipContent","map","prop","index","getFillColor","feature","_feature$properties","getLineColor","_feature$properties2","fc","fill_color_picker","stroke_color_picker","jsFnMutator","js_data_mutator","sandboxedEval","GeoJsonLayer","extruded","filled","stroked","getLineWidth","line_width","pointRadiusScale","point_radius_scale","lineWidthUnits","line_width_unit","DeckGLGeoJson","_payload$data2","useMemo","autozoom","_payload$data","_payload$data$feature","reduce","acc","bounds","geojsonExtent","fitViewport","coordinate","elevationValue","colorRange","CategoricalColorNamespace","color_scheme","range","aggFunc","getAggFunc","js_agg_function","p","weight","GridLayer","cellSize","grid_size","outline","getElevationValue","getColorValue","createDeckGLComponent","position","thirdPi","Math","PI","angles","pointX","pointY","nop","colorDomain","defaultColorRange","getColorWeight","colorAggregation","lowerPercentile","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","hexagonAggregator","aggregationParams","centerLngLat","getAccessor","minX","Infinity","minY","maxX","maxY","y","isFinite","every","getPointsCenter","radiusCommon","center","unitsPerMeter","getDistanceScales","getRadiusInCommon","screenPoints","iterable","objectInfo","createIterable","posIndex","screenCoord","projectFlat","source","log","warn","newHexbin","dx","dy","x0","y0","x1","y1","hexbin","binsById","bins","n","isNaN","px","call","point","py","pj","round","pi","py1","abs","px1","pi2","pj2","px2","py2","bin","hexagon","angle","sin","cos","join","centers","j","mesh","fragment","slice","_","extent","hexagons","hex","unprojectFlat","getPosition","material","_filterData","optional","HexagonLayer","AggregationLayer","cpuAggregator","CPUAggregator","getAggregator","getCellSize","aggregatorState","vertices","propsOrDataChanged","getAttributes","layerData","hexagonVertices","setState","convertLatLngToMeterOffset","Array","isArray","vertex0","vertex3","centroid","centroidFlat","metersPerUnit","vt","vtFlat","getPickingInfo","info","_onGetSublayerColor","cell","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","ColumnLayer","updateTriggers","radiusUnits","diskResolution","bind","getElevation","getSubLayerProps","getScale","c","fixedColor","path","PathLayer","getColor","getPath","rounded","defaultLineColor","wireframe","_normalize","_windingOrder","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","getPolygon","f","polygon","PolygonLayer","CompositeLayer","paths","getLineDashArray","removed","geometryChanged","dataChanged","updateTriggersChanged","all","pathsDiff","dataRange","replaceInRange","getIndex","__source","replace","_getPaths","positionFormat","positionSize","startRow","endRow","Polygon","holeIndices","getSubLayerRow","_dataDiff","lineDashJustified","FillLayer","SolidPolygonLayer","StrokeLayer","polygonLayer","shouldRenderSubLayer","lineColors","jointRounded","miterLimit","dashJustified","_pathType","getSubLayerAccessor","getDashArray","DEFAULT_NUM_BUCKETS","getBreakPoints","break_points","formDataBreakPoints","num_buckets","formDataNumBuckets","undefined","numBuckets","parseInt","minValue","maxValue","parseFloat","delta","precision","ceil","log10","extraBucket","toFixed","startValue","sort","getBreakPointColorScaler","_ref2","linear_color_scheme","linearColorScheme","opacity","breakPoints","colorScheme","SequentialScheme","colors","getSequentialSchemeRegistry","scaler","maskPoint","bucketedColors","getColors","first","last","unshift","scaleThreshold","domain","linearScaleDomain","some","createLinearScale","v","getPointsFromPolygon","coordinates","selected","metricLabel","metric","baseColorScaler","colorScaler","baseColor","line_column","tooltipContentGenerator","line_type","name","elevation","multiplier","DeckGLPolygon","getAdjustedViewport","flatMap","zoom","lastClick","setLastClick","stateFormData","setStateFormData","setSelected","now","Date","getDate","doubleClick","selectedCopy","splice","toggle_polygons","indexOf","table_filter","getLayers","buckets","mid","enabled","getBuckets","style","Legend","categories","legend_position","format","legend_format","METER_TO_MILE","verboseMap","_formData$point_radiu","point_radius_fixed","getMetricLabel","dataWithRadius","unit","point_unit","num","sqrt","ScatterplotLayer","getRadius","radiusMinPixels","min_radius","radiusMaxPixels","max_radius","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","cellSizePixels","cellMarginPixels","ScreenGridCellLayer","hasFeatures","FEATURES","TEXTURE_FLOAT","instancePositions","update","calculateInstancePositions","instanceCounts","noAlloc","shouldUpdateState","somethingChanged","params","oldProps","attributeManager","numInstances","invalidate","_updateUniforms","parameters","maxTexture","minColor","maxColor","depthTest","depthMask","attribute","_ref3","numCol","floor","_shouldUseMinMax","deprecated","shouldUseMinMax","colorRangeToFlatArray","viewportChanged","margin","cellScale","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","weights","accessors","ScreenGridLayer","GridAggregationLayer","isSupported","supported","initializeAggregationLayer","dimensions","count","operation","AGGREGATION_OPERATION","SUM","needMax","getFloatTexture","projectPoints","subLayerData","positionAttributeName","posOffset","translation","numRow","aggregationBuffer","finalizeState","maxBuffer","gpuGridAggregator","aggregationResults","getData","GPUGridAggregator","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSizeChanged","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","aggregationWeightsDirty","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","getValueFunc","cellWeight","DeckGLScreenGrid","_noop"],"sourceRoot":""}