{"version":3,"file":"e1492e6da9777b403b6b.chunk.js","mappings":"4LAoBO,SAASA,EAAYC,EAAOC,GACjC,MAAMC,EAAgB,CAAC,EACvB,IAAK,MAAMC,KAAOH,EACXC,EAAWG,SAASD,KACvBD,EAAcC,GAAOH,EAAMG,IAG/B,OAAOD,CACR,CCOc,MAAeG,UAGpBC,EAAAA,EAAgEC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAQxEC,2BAA2BC,GACzBC,MAAMC,gBAAgBC,KAAKC,SAE3BD,KAAKE,SAAS,CAEZC,YAAalB,EAAae,KAAKP,YAAoBW,WAAYP,EAAWQ,KAAKnB,OAC/EW,cAEH,CAEDS,YAAYC,GACVT,MAAMQ,YAAYC,GAClB,MAAM,YAACC,GAAeD,EACtB,GAAIC,EAAYC,kBAAmB,CACjC,MAAMC,EAAUV,KAAKW,WAAW,CAAC,GAC7BD,GAAWA,EAAQE,UACrBF,EAAQE,QAAQC,oBAAsB,GAExCb,KAAKc,cAAcJ,EACpB,CAGDV,KAAKe,mBACN,CAEDC,iBAAiBC,GAGfjB,KAAKE,SAAS,CAACe,qBAChB,CAEDC,gBACE,OAAOlB,KAAKmB,sBAAuBC,qBACpC,CAEDC,oBAIE,MAAM,SAACC,EAAD,cAAWC,EAAX,GAA0BC,GAAMxB,KAAKC,QAO3C,OANuBwB,OAAOC,OAAOD,OAAOE,OAAO3B,KAAKd,OAAQ,CAC9DoC,WACAC,gBACAK,cAAe,EACfC,kBAAkBC,EAAAA,EAAAA,GAAiBN,IAGtC,CAEDV,cAAcJ,GAEb,CAUDqB,mBACEC,EACAC,QAA+C,IAA/CA,IAAAA,EAAkD,CAAC,GAEnD,MAAM,MAAC/C,EAAD,SAAQgD,EAAR,YAAkB1B,GAAewB,GACjC,WAACG,GAAa,EAAd,UAAqBC,GAAaH,GAClC,YAAC9B,GAAeH,KAAKqC,OACpBnD,MAAOoD,EAAR,UAAmBC,EAAY,IAAMH,GACrC,sBAACI,GAAyBhC,EAChC,GAAIA,EAAYiC,YACd,OAAO,EAET,GAAID,EAAuB,CACzB,GAAIA,EAAsBE,IACxB,OAAO,EAET,IAAK,MAAMC,KAAYJ,EACrB,GAAIC,EAAsBG,GACxB,OAAO,CAGZ,CACD,GAAIR,EACF,QAAI3B,EAAYC,oBAKTmC,EAAAA,EAAAA,IAAa,CAClBV,WACAW,SAAU3D,EACViB,cACA2C,UAAY9C,KAAKP,YAAoBW,aAIzC,IAAK,MAAM2C,KAAQT,EACjB,GAAIpD,EAAM6D,KAAUb,EAASa,GAC3B,OAAO,EAGX,OAAO,CACR,CAQDC,mBAAmBD,GACjB,MAAM,kBAAC9B,GAAqBjB,KAAKqC,MACjC,OAAKU,EAIE9B,QAAiDgC,IAA5BhC,EAAkB8B,IAiBlD,SAAuBG,GACrB,IAAIC,GAAU,EAEd,IAAK,MAAM9D,KAAO6D,EAAK,CACrBC,GAAU,EACV,KACD,CACD,OAAOA,CACR,CA3BaC,CAAcnC,EAGzB,CAKDoC,uBACE,OAAO,IAAIC,EAAAA,EAAiBtD,KAAKC,QAAQuB,GAAI,CAC3C+B,GAAIvD,KAAKd,MAAMqE,GACfC,MAAOxD,KAAKC,QAAQuD,OAEvB,G,OA3I2BjE,EAAAA,YAIT,mB,2CCnBd,MAAMkE,EAAgD,CAC3D,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,GAAI,IACV,CAAC,IAAK,EAAG,KAIJ,SAASC,EAAsBC,EAAYC,EAAmBC,GACnE,IAAIC,EAEJ,QAHyD,IAATF,IAAAA,GAAY,QAAgB,IAATC,IAAAA,EAAYE,cAG3EC,OAAOC,SAASN,EAAW,IAE7BG,EAAY,IAAID,EAAUF,OACrB,CAELG,EAAY,IAAID,EAA8B,EAApBF,EAAWO,QACrC,IAAIC,EAAQ,EAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAWO,OAAQE,IAAK,CAC1C,MAAMC,EAAQV,EAAWS,GACzBN,EAAUK,KAAWE,EAAM,GAC3BP,EAAUK,KAAWE,EAAM,GAC3BP,EAAUK,KAAWE,EAAM,GAC3BP,EAAUK,KAAWH,OAAOC,SAASI,EAAM,IAAMA,EAAM,GAAK,GAC7D,CACF,CAED,GAAIT,EACF,IAAK,IAAIQ,EAAI,EAAGA,EAAIN,EAAUI,OAAQE,IACpCN,EAAUM,IAAM,IAGpB,OAAON,CACR,C,4FCvBc,MAAetE,UAA+C8E,EAAAA,EAMvEC,kBACF,OAAO,CACR,CAGGC,eACF,OAAO1E,MAAM0E,UAAYxE,KAAKyE,eAAeC,OAAMC,GAASA,EAAMH,UACnE,CAGDC,eACE,OAAQzE,KAAK4E,eAAiB5E,KAAK4E,cAAcC,WAAc,EAChE,CAKD9E,gBAAgBE,GAA+B,CAG/CC,SAAS4E,GACPhF,MAAMI,SAAS4E,GAMf9E,KAAK+E,gBACN,CAKDC,eAAcC,GAA6C,IAA5C,KAACC,GAAFD,EACZ,MAAM,OAACE,GAAUD,EAIjB,OAFEC,GAAUA,EAAOC,UAAYD,EAAOC,SAASC,QAAUF,EAAOC,SAASC,OAAO9B,KAAOvD,KAAKuD,IAO5F2B,EAAKC,OAASA,EAAOC,SAASD,OAC9BD,EAAKf,MAAQgB,EAAOC,SAASjB,MAEtBe,GAPEA,CAQV,CAQDI,eAAerF,GACb,OAAO,CACR,CAGSsF,qBAAqBC,EAAoBnF,GACjD,OAAOA,GAAQA,EAAK6D,MACrB,CAGSuB,iBACRD,EACAE,GAEA,MAAOC,eAAgBC,GAAmB5F,KAAKd,MAE/C,OACG0G,GACCA,EAAgBJ,IACfI,EAAgBJ,GAAYK,MAC/BH,CAEH,CAISI,eAAkBC,EAAQC,EAAmBC,GAOrD,OALAF,EAAIX,SAAW,CACbC,OAAQrF,KACRmF,OAAQa,EACR7B,MAAO8B,GAEFF,CACR,CAKSG,oBAA6BvD,GACrC,GAAwB,mBAAbA,EAAyB,CAClC,MAAMwD,EAAkC,CACtChC,OAAQ,EAER9D,KAAML,KAAKd,MAAMmB,KACjB+F,OAAQ,IAEV,MAAO,CAACC,EAAQjC,IACViC,GAAKA,EAAEjB,UACTe,EAAWhC,MAAQkC,EAAEjB,SAASjB,MAEvBxB,EAAS0D,EAAEjB,SAASD,OAAcgB,IAGpCxD,EAAS0D,EAASjC,EAE5B,CACD,OAAOzB,CACR,CAIS2D,iBACRC,GAKK,IAAAC,OADJ,IAJDD,IAAAA,EAII,CAAC,GAEL,MAAM,QACJE,EADI,SAEJC,EAFI,QAGJC,EAHI,WAIJC,EAJI,iBAKJC,EALI,uBAMJC,EANI,cAOJC,EAPI,eAQJC,EARI,iBASJC,EATI,iBAUJC,EAVI,cAWJC,EAXI,eAYJC,EAZI,YAaJC,EAbI,WAcJC,EAdI,MAeJC,EAfI,UAgBJC,EACA7B,eAAgBC,GACd5F,KAAKd,MACH2D,EAAW,CACfU,GAAI,GACJkE,eAAgB,CAAC,EACjBhB,UACAC,WACAC,UACAC,aACAC,mBACAC,yBACAC,gBACAC,iBACAC,mBACAC,mBACAC,gBACAC,iBACAC,cACAC,aACAC,QACAC,aAGIE,EACJ9B,GAAmBW,EAAchD,IAAMqC,EAAgBW,EAAchD,IACjEoE,EACJD,GAA2BA,EAAwBD,eAC/CG,EAAarB,EAAchD,IAAM,WAEvC,GAAImE,EAAyB,CAC3B,MAAM5E,EAAY9C,KAAKd,MAAM2I,EAAAA,IACvBC,EAAoBvB,EAAcV,KAAOU,EAAcV,KAAKzF,WAAa,CAAC,EAChF,IAAK,MAAMf,KAAOqI,EAAyB,CACzC,MAAMK,EAAWD,EAAkBzI,IAAQyD,EAAUzD,GAEjD0I,GAA8B,aAAlBA,EAASlC,OACvB6B,EAAwBrI,GAAOW,KAAKkG,oBAAoBwB,EAAwBrI,IAEnF,CACF,CAEDoC,OAAOC,OACLmB,EACA0D,EAEAmB,GAEF7E,EAASU,GAAT,GAAAyE,OAAiBhI,KAAKd,MAAMqE,GAA5B,KAAAyE,OAAkCJ,GAClC/E,EAAS4E,eAAiB,CACxB/E,IAAG,QAAA8D,EAAExG,KAAKd,MAAMuI,sBAAb,IAAAjB,OAAA,EAAEA,EAA2B9D,OAC7B6D,EAAckB,kBACdE,GAKL,IAAK,MAAMM,KAAaX,EAAY,CAClC,MAAMY,EAAmBD,EAAU3B,iBAAiB6B,KAAKnI,KAAMiI,GAC3DC,GACFzG,OAAOC,OAAOmB,EAAUqF,EAAkB,CACxCT,eAAgBhG,OAAOC,OAAOmB,EAAS4E,eAAgBS,EAAiBT,iBAG7E,CAED,OAAO5E,CACR,CAGSuF,qBAAqBlD,GAC7B,IAAK,MAAMP,KAAS3E,KAAKyE,eACvBE,EAAM0D,oBAAoBnD,EAE7B,CAGS7B,uBACR,OAAO,IACR,CAGSiF,YAAYC,EAAsCC,GAE1D,IAAI3D,EAAY7E,KAAK4E,cAAcC,UACnC,MAAM4D,GAAgB5D,GAAa7E,KAAK0I,cACxC,GAAID,EAAc,CAChB,MAAME,EAAgB3I,KAAK4I,eAI3B/D,GAAYgE,EAAAA,EAAAA,GAAQF,EAAeG,SAEnC9I,KAAK4E,cAAcC,UAAYA,CAChC,EACDkE,EAAAA,EAAAA,GAnPwB,8BAmPG/I,KAAMyI,EAAc5D,GAI/C,IAAK,MAAMF,KAASE,EAClBF,EAAMU,OAASrF,IAElB,G,OAxP2BR,EAAAA,YAGD,iB,wFCP7B,MAAMwJ,EAAe,IAAIjF,aAAa,IAG/B,SAASkF,EAAaC,EAAoBrJ,QAAkB,IAAlBA,IAAAA,EAAqB,GACpE,IAAIsE,EAAQ,EACZ,IAAK,MAAMgF,KAASD,EAClB,IAAK,IAAI9E,EAAI,EAAGA,EAAIvE,EAAYuE,IAC9B4E,EAAa7E,KAAWgF,EAAM/E,IAAM,EAGxC,OAAO4E,CACR,C,qICHc,MAAMI,UAAsB9E,EAAAA,EAGzC3D,aACE,MAAO,CAAC0I,GCnBZ,yzBDmBgBC,GErBhB,q0BFqBoBC,QAAS,CAACC,EAAAA,GAC3B,CAEDzJ,gBAAekF,GAA4B,IAA3B,GAACzD,GAAFyD,EACYjF,KAAKmB,sBACbsI,IAAI,CACnBC,UAAW,CAACC,KAAM,EAAGC,SAAS,GAC9BC,UAAW,CAACF,KAAM,EAAGC,SAAS,KAEhC5J,KAAKE,SAAS,CACZ4J,MAAO9J,KAAK+J,UAAUvI,IAEzB,CAEDuI,UAAUvI,GACR,MAAM,YAACwI,GAAehK,KAAKd,MAE3B,OAAO,IAAI+K,EAAAA,EAAMzI,EAAI,IAChBxB,KAAKW,aACR4C,GAAIvD,KAAKd,MAAMqE,GACf2G,SAAU,IAAIC,EAAAA,EAAS,CACrBC,SAAU,EACVJ,iBAGL,CAEDK,KAAIC,GAAoB,IAAnB,SAACC,GAAFD,EACF,MAAM,MAACR,GAAS9J,KAAKqC,OAEf,QAACmI,EAAD,WAAUC,EAAV,aAAsBC,EAAtB,UAAoCC,EAApC,UAA+CC,EAA/C,gBAA0DC,EAA1D,YAA2EC,GAC/E9K,KAAKd,MAEP4K,EACGiB,YAAY,IACRR,EACHC,UACAC,aACAC,eACAC,YACAC,YACAC,kBACAC,gBAEDT,MACJ,G,OAjDkBjB,EAAAA,YACA,iB,0BGtCrB,MC+DM4B,EAAkB,CACtBC,SAAS,EACTrE,WAAY,CACV,WACA,WACA,YACA,aAEFsE,WAAY,MAERC,EAAuB,CAAC,EAAG,GAC3BC,EAAmB,CACvBC,IAAK,EACLC,KAAM,GAGFC,EAAgD,CACpDC,YAAa,CAAC3F,KAAM,WAAY4F,MAAOpF,GAAKA,EAAEqF,UAC9CC,UAAW,CAAC9F,KAAM,WAAY4F,MAAO,GACrCd,UAAW,CAAC9E,KAAM,SAAU+F,IAAK,EAAGH,MAAO,GAC3CI,aAAc,CAAChG,KAAM,SAAU+F,IAAK,EAAGE,IAAK,IAAKL,MAAO,IACxD9H,WAAYF,EAAAA,EACZmH,UAAW,CAAC/E,KAAM,SAAU+F,IAAK,EAAGE,IAAK,EAAGL,MAAO,KACnDX,YAAa,CAACjF,KAAM,QAAS4F,MAAO,KAAMM,UAAU,GAEpDC,YAAa,MACbC,mBAAoB,CAACpG,KAAM,SAAU+F,IAAK,IAAKE,IAAK,KAAML,MAAO,MACjES,gBAAiB,CAACrG,KAAM,SAAU+F,IAAK,EAAGE,IAAK,IAAML,MAAO,MAGxDU,EAAoB,CACxBC,EAAAA,EAASC,sBACTD,EAAAA,EAASE,eAGLC,EAAwB,CAC5BH,EAAAA,EAASI,yBACTJ,EAAAA,EAASK,aAGLC,EAAa,CACjBrM,KAAM,CACJnB,MAAO,CAAC,kBAoFG,MAAMyN,UAGXpN,EAAAA,EAA2EE,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,qBAiBnFI,kBACE,MAAM,GAACyB,GAAMxB,KAAKC,QAClB,KAAK2M,EAAAA,EAAAA,IAAYpL,EAAI2K,GAGnB,OAFAnM,KAAKE,SAAS,CAAC2M,WAAW,SAC1BC,EAAAA,EAAIC,MAAJ,iBAAA/E,OAA2BhI,KAAKuD,GAAhC,qCAAAuJ,GAGFhN,MAAMF,2BAA2B8M,GACjC1M,KAAKE,SAAS,CAAC2M,WAAW,EAAM/B,YAAaK,IAC7CnL,KAAKgN,sBACLhN,KAAKiN,mBACLjN,KAAKkN,iBACN,CAEDC,kBAAiBlI,GAAyC,IAAxC,YAACzE,GAAFyE,EAEf,OAAOzE,EAAY4M,gBACpB,CAGD9M,YAAYC,GACLP,KAAKqC,MAAMwK,YAGhB/M,MAAMQ,YAAYC,GAClBP,KAAKqN,oBAAoB9M,GAC1B,CAED8M,oBAAoB9M,GAClB,MAAM,MAACrB,EAAD,SAAQgD,GAAY3B,EACpBC,EAAcR,KAAKsN,gBAAgB/M,IAErCC,EAAYiC,aAAejC,EAAY+M,mBAEzC/M,EAAYgN,cAAgBxN,KAAKyN,cAAcjN,EAAYiC,aAC3DzC,KAAK0N,iCAGHlN,EAAYiC,aAAejC,EAAYgN,eAEzCG,aAAa3N,KAAKqC,MAAMuL,aACxB5N,KAAKE,SAAS,CAAC2N,kBAAkB,KACxBrN,EAAYsN,qBAErB9N,KAAK+N,4BAGH7O,EAAMyE,aAAezB,EAASyB,YAChC3D,KAAKgO,oBAAoBzN,GAGvBP,KAAKqC,MAAMwL,kBACb7N,KAAKiO,mBAGPjO,KAAKE,SAAS,CAACgO,KAAM3N,EAAKN,QAAQqB,SAAS4M,MAC5C,CAEDtF,eACE,IAAK5I,KAAKqC,MAAMwK,UACd,MAAO,GAET,MAAM,eACJsB,EADI,kBAEJC,EAFI,kBAGJC,EAHI,kBAIJC,EAJI,aAKJ5D,EALI,YAMJI,GACE9K,KAAKqC,OACH,eAACoF,EAAD,UAAiBkD,EAAjB,UAA4BC,EAA5B,YAAuCoB,GAAehM,KAAKd,MAIjE,OAAO,IAFoBc,KAAKyF,iBAAiB,WAAY2D,GAEtD,CACLpJ,KAAKsG,iBAAiB,CACpB/C,GAAI,iBACJkE,mBAEF,CAGER,iBAAkBsH,EAAAA,GAAkBC,QACpCnO,KAAM,CACJoO,WAAY,CACV/E,UAAW0E,EACXvE,UAAWwE,IAGfrE,YAAa,EACbS,WAAY6D,EACZ5D,eACAG,gBAAiBO,EAAiBY,IAAgB,EAClDxB,QAAS2D,EACTxD,YACAC,YACAE,eAGL,CAED4D,cAAczO,GACZH,MAAM4O,cAAczO,GACpB,MAAM,iBACJ0O,EADI,eAEJR,EAFI,mBAGJS,EAHI,kBAIJN,EAJI,kBAKJF,EALI,kBAMJC,EANI,aAOJ3D,EAPI,YAQJkD,GACE5N,KAAKqC,MACTsM,SAAAA,EAAkBE,SAClBV,SAAAA,EAAgBU,SAChBD,SAAAA,EAAoBC,SACpBP,SAAAA,EAAmBO,SACnBT,SAAAA,EAAmBS,SACnBR,SAAAA,EAAmBQ,SACnBnE,SAAAA,EAAcmE,SACVjB,GACFD,aAAaC,EAEhB,CAKDvK,uBACE,OAAO,IAAIC,EAAAA,EAAiBtD,KAAKC,QAAQuB,GAAI,CAC3C+B,GAAIvD,KAAKd,MAAMqE,GACfC,MAAOxD,KAAKC,QAAQuD,OAEvB,CAED8J,gBAAgB/M,GACd,MAAMC,EAGF,CAAC,GACC,WAACX,GAAcG,KAAKqC,MAC1B7B,EAAYiC,YACVzC,KAAKgD,sBACLhD,KAAK+B,mBAAmBxB,EAAM,CAC5B4B,YAAY,EACZC,UAAWvC,EAAWQ,OAE1BG,EAAY+M,gBAAkBhN,EAAKC,YAAY+M,gBAE/C,MAAM,KAACW,GAAQlO,KAAKqC,MAKpB,OAJK9B,EAAKN,QAAQqB,UAAYf,EAAKN,QAAQqB,SAAS4M,OAASA,IAC3D1N,EAAYsN,qBAAsB,GAG7BtN,CACR,CAEDsO,kBACE,MAAM,GAACtN,GAAMxB,KAAKC,SACZ,YAAC8O,EAAD,OAAcC,EAAd,KAAsBnJ,GAAQ7F,KAAKqC,MAEzCrC,KAAKE,SAAS,CACZiO,eAAgB,IAAIc,EAAAA,EAAUzN,EAAI,CAChC0N,MAAOH,EACPI,OAAQJ,EACRC,SACAnJ,UACGmF,IAELsD,kBAAmB,IAAIW,EAAAA,EAAUzN,EAAI,CAACwN,SAAQnJ,UAASmF,KAE1D,CAEDiC,mBAC2BjN,KAAKmB,sBACbsI,IAAI,CACnBC,UAAW,CAACC,KAAM,EAAG9D,KAAM,KAAWlD,SAAU,eAChDyM,QAAS,CAACzF,KAAM,EAAGhH,SAAU,eAE/B3C,KAAKE,SAAS,CAACmP,sBAAuB,aACvC,CAEDrC,sBACE,MAAM,GAACxL,GAAMxB,KAAKC,SACZ,mBAACgM,GAAsBjM,KAAKd,MAE5B6P,EAAcO,KAAK1D,IAAIK,GAAoBsD,EAAAA,EAAAA,IAAc/N,EAAD,OACxDgO,GAAqB5C,EAAAA,EAAAA,IAAYpL,EAAI+K,IACrC,OAACyC,EAAD,KAASnJ,GL5TZ,SAAAZ,GAAqD,IAA3B,GAACzD,EAAD,mBAAKgO,GAA/BvK,EACL,OAAOuK,EACH,CAEER,QAAQS,EAAAA,EAAAA,IAASjO,GAAT,WACRqE,KAAM,MAER,CACEmJ,OAAQ,KACRnJ,KAAM,KAEb,CKiT0B6J,CAAiB,CAAClO,KAAIgO,uBACvCG,EAAeH,EAAqB,EAAI,EAAI,IAClDxP,KAAKE,SAAS,CAAC6O,cAAaC,SAAQnJ,OAAM8J,iBACrCH,GACH1C,EAAAA,EAAI8C,KAAJ,iBAAA5H,OACmBhI,KAAKuD,GADxB,mFAAAuJ,EAIH,CAEDnM,WAAWkF,GACT,OAAO/F,MAAMa,WACF,0BAATkF,EACI,CACEwD,GC3ZZ,6JD4ZYwG,IE5ZZ,yIF8ZU,CACExG,GD/ZZ,2qBCgaYwG,IGhaZ,4VHmaG,CAEDC,wBAAwBpP,GAAc,IAAAqP,OAAP,IAAPrP,IAAAA,EAAU,CAAC,GACjC,MAAM,GAACc,GAAMxB,KAAKC,QAClB,IAAI,iBAAC0O,GAAoB3O,KAAKqC,MAC9B,MAAM,eAAC8L,GAAkBnO,KAAKqC,MACd,QAAhB0N,EAAApB,SAAA,IAAAoB,GAAAA,EAAkBlB,SAElBF,EAAmB,IAAIqB,EAAAA,EAAUxO,EAAI,CACnC+B,GAAI,GAAFyE,OAAKhI,KAAKuD,GAAV,sBACF0M,aAAc,EACdC,eAAgB/B,EAChBgC,sBAAuB,oBACpBzP,IAELV,KAAKE,SAAS,CAACyO,oBAChB,CAEDzB,kBACE,MAAM,GAAC1L,GAAMxB,KAAKC,QAClBD,KAAK8O,kBACL,MAAM,YAACC,EAAD,eAAcZ,EAAd,kBAA8BG,GAAqBtO,KAAKqC,MAExD+N,EAA0BpQ,KAAKW,WAAW,qBAChDX,KAAK8P,wBAAwBM,GAE7B,MAAMC,EAA6BrQ,KAAKW,WAAW,yBAC7CiO,EAAqB,IAAIoB,EAAAA,EAAUxO,EAAI,CAC3C+B,GAAI,GAAFyE,OAAKhI,KAAKuD,GAAV,0BACF+M,gBAAiB,CACfC,UAAWpC,GAEb+B,eAAgB5B,EAChB6B,sBAAuB,gBACpBE,EACHJ,aAAclB,EAAcA,IAG9B/O,KAAKE,SAAS,CACZiO,iBACAG,oBACAM,qBACAV,KAAM,KACNE,kBAAmB,IAAIoC,EAAAA,EAAOhP,EAAI,CAChCiP,WAAY,GACZ9N,SAAU,CAACgH,KAAM,KAEnB0E,kBAAmB,IAAImC,EAAAA,EAAOhP,EAAI,CAChCiP,WAAY,GACZ9N,SAAU,CAACgH,KAAM,MAGtB,CAGD7I,cAAc4P,GAEZ1Q,KAAK8P,wBAAwBY,EAC9B,CAEDC,wBACE,MAAM,mBAAC/B,GAAsB5O,KAAKqC,MAClCuM,EAAmBgC,IAAI,CACrBhK,WAAY,CACViK,OAAO,EACPC,WAAW,EACXC,UAAW,CAAC,EAAD,GACXC,cAAe,QAGpB,CAGDvD,cAAcjF,QAAgB,IAAhBA,IAAAA,GAAmB,GAC/B,MAAM,SAAClH,GAAYtB,KAAKC,QAIlBgR,EAAkB,CACtB3P,EAAS4P,UAAU,CAAC,EAAG,IACvB5P,EAAS4P,UAAU,CAAC5P,EAAS4N,MAAO,IACpC5N,EAAS4P,UAAU,CAAC5P,EAAS4N,MAAO5N,EAAS6N,SAC7C7N,EAAS4P,UAAU,CAAC,EAAG5P,EAAS6N,UAChCgC,KAAIC,GAAKA,EAAED,IAAI7B,KAAK+B,UAGhBC,ELtfH,SAAmBpI,GAExB,MAAM7C,EAAI6C,EAAOiI,KAAIC,GAAKA,EAAE,KACtBG,EAAIrI,EAAOiI,KAAIC,GAAKA,EAAE,KAEtBI,EAAOlC,KAAK1D,IAAI6F,MAAM,KAAMpL,GAC5BqL,EAAOpC,KAAKxD,IAAI2F,MAAM,KAAMpL,GAIlC,MAAO,CAACmL,EAHKlC,KAAK1D,IAAI6F,MAAM,KAAMF,GAGdG,EAFPpC,KAAKxD,IAAI2F,MAAM,KAAMF,GAGnC,CK2e8BI,CAAUV,GAE/BW,EAA2C,CAACN,qBAAoBL,mBACtE,IAAIzD,GAAgB,EAEpB,GACEhF,IACCxI,KAAKqC,MAAMwP,cL/eYC,EKgfT9R,KAAKqC,MAAMwP,eLhfuBE,EKgfVT,GL9e5B,IAAMQ,EAAc,IACjCC,EAAa,IAAMD,EAAc,IACjCC,EAAa,IAAMD,EAAc,IACjCC,EAAa,IAAMD,EAAc,KK4e/B,CAGA,MAAME,EAAqBhS,KAAKiS,qBAAqBX,GAG/CO,EAAc7R,KAAKkS,qBAAqBF,GAG1ChS,KAAKd,MAAM+H,mBAAqBsH,EAAAA,GAAkB4D,SACpDN,EAAY,GAAKvC,KAAKxD,IAAI+F,EAAY,IAAK,WAC3CA,EAAY,GAAKvC,KAAK1D,IAAIiG,EAAY,GAAI,WAC1CA,EAAY,GAAKvC,KAAKxD,IAAI+F,EAAY,IAAK,KAC3CA,EAAY,GAAKvC,KAAK1D,IAAIiG,EAAY,GAAI,MAI5C,MAAMO,EAAyBpS,KAAKiS,qBAAqBJ,GAEzDD,EAASC,YAAcA,EACvBD,EAASQ,uBAAyBA,EAElC5E,GAAgB,CACjB,CLxgBE,IAAuBsE,EAAyBC,EK0gBnD,OADA/R,KAAKE,SAAS0R,GACPpE,CACR,CAEDE,gCAEE,MAAM,kBAACU,EAAD,kBAAoBC,EAApB,uBAAuC+D,EAAvC,gBAA+DnB,GACnEjR,KAAKqC,OAED,SAACf,GAAYtB,KAAKC,QAExBmO,EAAkBiE,QAAQpJ,EAAagI,EAAiB,IAExD,MAAMqB,EAAgBrB,EAAgBE,KAAIC,GL5dvC,SAA+BjI,EAAiBoJ,GACrD,MAAOf,EAAMgB,EAAMd,EAAMe,GAAQF,EACjC,MAAO,EAAEpJ,EAAM,GAAKqI,IAASE,EAAOF,IAAQrI,EAAM,GAAKqJ,IAASC,EAAOD,GACxE,CK0dKE,CAAsBpR,EAASqR,gBAAgBvB,GAAIgB,KAErD/D,EAAkBgE,QAAQpJ,EAAaqJ,EAAe,GACvD,CAEDtE,oBAAoBzN,GAClB,MAAM,WAACoD,GAAcpD,EAAKrB,MAC1B,IAAI,aAACwL,GAAgB1K,KAAKqC,MAC1B,MAAMuQ,GAASlP,EAAAA,EAAAA,GAAsBC,GAAY,EAAOkP,YAEpDnI,EACFA,EAAaoI,aAAa,CACxBzS,KAAMuS,EACN1D,MAAOvL,EAAWO,SAGpBwG,EAAe,IAAIuE,EAAAA,EAAUjP,KAAKC,QAAQuB,GAAI,CAC5CnB,KAAMuS,EACN1D,MAAOvL,EAAWO,OAClBiL,OAAQ,KACLnE,IAGPhL,KAAKE,SAAS,CAACwK,gBAChB,CAEDuD,mBACE,MAAM,aAACpC,EAAD,YAAef,EAAf,YAA4BkB,GAAehM,KAAKd,OAChD,iBAACyP,EAAD,YAAmBkD,EAAnB,YAAgC9C,EAAhC,eAA6CZ,EAA7C,aAA6DwB,GAAgB3P,KAAKqC,MACxFrC,KAAKqC,MAAMwL,kBAAmB,EAG9B,MAAMkF,EAAe/S,KAAKiS,qBAAqBJ,EAAa,CAC1DmB,0BAA0B,IAG5B,GAAIlI,GAA+B,QAAhBkB,EAAuB,CAExC,MAAM,SAAC1K,GAAYtB,KAAKC,QAClBgT,EACH3R,EAAS4R,eAAeC,cAAc,IAAMJ,EAAa,GAAKA,EAAa,IAC5EhE,EACF/O,KAAKqC,MAAMyI,YAAcA,EAAYqG,KAAI9K,GAAKA,EAAI4M,EAAiBtD,GACpE,MACC3P,KAAKqC,MAAMyI,YAAcA,GAAeK,EAG1C,MAAMZ,EAAW,CACfsB,eACAkH,eACAK,aAAcrE,EACdY,gBAIFhB,EAAiB0E,OAAO,CACtBpD,aAAcjQ,KAAKsT,qBAGrBC,EAAAA,EAAAA,IAAevT,KAAKC,QAAQuB,GAAI,CAACgS,WAAY,CAAC,EAAG,EAAG,EAAG,KAAK,KAC1D7E,EAAiBiC,IAAI,CACnBrG,WACA3D,WAAY,CACViK,OAAO,EACPC,WAAW,EACXC,UAAW,CAAC,EAAD,GACXC,cAAe,OAEjByC,mBAAmB,EACnBhF,WAAYzO,KAAKkB,gBACjBwS,eAAgB1T,KAAKqB,qBAVvB,IAaFrB,KAAK2Q,wBAGLxC,EAAewF,cAAc,CAC3B,WACA,YAEH,CAED5F,0BAA0B6F,QAAS,IAATA,IAAAA,GAAY,GACpC,IAAI,YAAChG,GAAe5N,KAAKqC,MACzB,MAAM,gBAAC6J,GAAmBlM,KAAKd,MAE3B0U,GACFhG,EAAc,KAEd5N,KAAKyN,eAAc,GACnBzN,KAAK0N,gCACL1N,KAAKE,SAAS,CAAC2N,kBAAkB,MAEjC7N,KAAKE,SAAS,CAAC2N,kBAAkB,IACjCF,aAAaC,GACbA,EAAciG,WAAW7T,KAAK+N,0BAA0B+F,KAAK9T,MAAM,GAAOkM,IAG5ElM,KAAKE,SAAS,CAAC0N,eAChB,CAKDqE,qBAAqBJ,EAAatR,QAA0C,IAA1CA,IAAAA,EAA6C,CAAC,GAC9E,MAAM,yBAACyS,GAA2B,GAASzS,GACpCwT,EAASC,EAAQC,EAASC,GAAUrC,GACrC,SAACvQ,GAAYtB,KAAKC,SAClB,YAAC8O,GAAe/O,KAAKqC,OACrB,iBAAC4E,GAAoBjH,KAAKd,MAE1BiV,EACJnB,IACC/L,IAAqBsH,EAAAA,GAAkB6F,gBACtCnN,IAAqBsH,EAAAA,GAAkB8F,eACrCC,EAAqBH,EACvB7S,EAASqR,gBAAgB3S,KAAKd,MAAMgI,kBACpC,CAAC,EAAG,GACFyC,EAhmBS,EAgmBDoF,EAA4BzN,EAASiT,MAEnD,IAAIC,EACAC,EAWJ,OARIzB,IAA6BmB,GAC/BK,EAAmBxU,KAAK2S,gBAAgB,CAACoB,EAASC,EAAQ,IAC1DS,EAAiBzU,KAAK2S,gBAAgB,CAACsB,EAASC,EAAQ,MAExDM,EAAmBlT,EAASqR,gBAAgB,CAACoB,EAASC,EAAQ,IAC9DS,EAAiBnT,EAASqR,gBAAgB,CAACsB,EAASC,EAAQ,KL9nB3D,SAA4BQ,EAAuBxF,EAAeC,GACvE,MAAOqC,EAAMgB,EAAMd,EAAMe,GAAQiC,EAE3BC,EAAejD,EAAOF,EACtBoD,EAAgBnC,EAAOD,EAE7B,IAAIqC,EAAWF,EACXG,EAAYF,EACZD,EAAeC,EAAgB1F,EAAQC,EAEzC0F,EAAY3F,EAAQC,EAAUyF,EAE9BE,EAAa3F,EAASD,EAASyF,EAG7BE,EAAW3F,IACb2F,EAAW3F,EACX4F,EAAY3F,GAGd,MAAM4F,GAAWrD,EAAOF,GAAQ,EAC1BwD,GAAWvC,EAAOD,GAAQ,EAEhC,MAAO,CACLuC,EAAUF,EAAW,EACrBG,EAAUF,EAAY,EACtBC,EAAUF,EAAW,EACrBG,EAAUF,EAAY,EAEzB,CKomBUG,CACL,CACET,EAAiB,GAAKF,EAAmB,GACzCE,EAAiB,GAAKF,EAAmB,GACzCG,EAAe,GAAKH,EAAmB,GACvCG,EAAe,GAAKH,EAAmB,IAEzC3K,EACAA,EAEH,CAIDuI,qBAAqBa,GACnB,MAAOvB,EAAMgB,EAAMd,EAAMe,GAAQM,GAC3B,SAACzR,GAAYtB,KAAKC,QAClBiV,EAAkB5T,EAAS6T,kBAAkB,CAAC3D,EAAMgB,IACpD4C,EAAgB9T,EAAS6T,kBAAkB,CAACzD,EAAMe,IAExD,OAAOyC,EAAgBG,MAAM,EAAG,GAAGrN,OAAOoN,EAAcC,MAAM,EAAG,GAClE,G,OApgBkB1I,EAAAA,YAIA,iB,OAJAA,EAAAA,eAKGpB,G,qGIvKxB,SAAS+J,EAAkBC,GACzB,OACEC,EAAAA,EAAAA,IAAA,OAAKC,UAAU,mBACbD,EAAAA,EAAAA,IAACE,EAAAA,EAAU,CACTC,OAAOC,EAAAA,EAAAA,GAAE,uCACTnK,MAAO,IAAI8J,EAAEM,WAAW,OAAON,EAAEM,WAAW,QAIpD,CACO,MAAMC,EAAkCA,CAC7CC,EACAC,EACAC,EACAC,KACE,IAAAC,EAAAC,EAAAC,EAAAC,EACF,MAAMC,EAAKR,GACL,UACJpL,EAAY,EACZ6L,cAAe3K,EAAe,GAAE,YAChCG,EAAc,MACdyK,gBAAiBC,EACjBC,oBAAqBC,GACnBL,EACJ,IAAIlW,EAAO2V,EAAQ3V,KAAKwW,SAEpBH,IAGFrW,GAD4ByW,EAAAA,EAAAA,GAAcP,EAAGE,gBACtCM,CAAoB1W,IAG7B,MAAM2W,EAA0C,OAAhCb,GAAGc,EAAAA,EAAAA,OACC,OAD4Bb,EAA7BD,EACfe,IAAIN,SADwC,EAA7BR,EAEfe,kBAAkB,CAAC,EAAG,IACpBxT,EAAuB,MAAVqT,GACR,OADkBX,EAAVW,EACfI,UAC6B,OADtBd,EADQD,EAEflF,KAAI9M,IAASgT,EAAAA,EAAAA,UAAShT,WAFG,EAAViS,EAGfgB,UAEJ,OAAO,IAAI3K,EAAa,CACtBpJ,GAAI,gBAAgBgT,EAAGgB,WACvBlX,OACAsK,YACAkB,eACAlI,aACAqI,YAAaA,EAAYwL,cACzBhM,YAAciM,GAA8CA,EAAE/L,SAC9DC,UAAY8L,GACVA,EAAEC,OAASD,EAAEC,OAAS,MACrBC,EAAAA,EAAAA,GAAiBpB,EAAIL,EAAYZ,IACpC,EAOJ,GAAesC,EAAAA,EAAAA,GAAsB9B,GAJrC,SAAmBzV,GACjB,OAAOA,EAAK8Q,KAAIsG,GAAKA,EAAE/L,UACzB,G","sources":["webpack://superset/../../../src/utils/prop-utils.js","webpack://superset/../../src/aggregation-layer.ts","webpack://superset/../../../src/utils/color-utils.ts","webpack://superset/../../../src/lib/composite-layer.ts","webpack://superset/../../../src/heatmap-layer/heatmap-layer-utils.ts","webpack://superset/../../../src/heatmap-layer/triangle-layer.ts","webpack://superset/../../../src/heatmap-layer/triangle-layer-vertex.glsl.ts","webpack://superset/../../../src/heatmap-layer/triangle-layer-fragment.glsl.ts","webpack://superset/../../../src/heatmap-layer/weights-vs.glsl.ts","webpack://superset/../../../src/heatmap-layer/heatmap-layer.ts","webpack://superset/../../../src/heatmap-layer/max-vs.glsl.ts","webpack://superset/../../../src/heatmap-layer/max-fs.glsl.ts","webpack://superset/../../../src/heatmap-layer/weights-fs.glsl.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Heatmap/Heatmap.tsx"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport function filterProps(props, filterKeys) {\n  const filteredProps = {};\n  for (const key in props) {\n    if (!filterKeys.includes(key)) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange: [number, number, number][] = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\nimport {PROP_TYPES_SYMBOL} from '../lifecycle/constants';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT extends {} = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  /** Returns sub layer props for a specific sublayer */\n  // eslint-disable-next-line complexity\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points: number[][]): number[] {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds: number[], targetBounds: number[]): boolean {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points: number[][], dimensions: number = 2): Float32Array {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox: number[], width: number, height: number): number[] {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point: number[], bounds: number[]) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return floatTargetSupport\n    ? {\n        // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n        format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT\n      }\n    : {\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE\n      };\n}\n","// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport {Layer, LayerContext, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\ntype _TriangleLayerProps = {\n  colorDomain: number[];\n  aggregationMode: string;\n  threshold: number;\n  intensity: number;\n  vertexCount: number;\n  colorTexture: Texture2D;\n  maxTexture: Texture2D;\n  texture: Texture2D;\n};\n\nexport default class TriangleLayer extends Layer<_TriangleLayerProps> {\n  static layerName = 'TriangleLayer';\n\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState({gl}: LayerContext): void {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}): void {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, aggregationMode, colorDomain} =\n      this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Inspired by screen-grid-layer vertex shader in deck.gl\n\nexport default `\\\n#define SHADER_NAME heatp-map-layer-vertex-shader\n\nuniform sampler2D maxTexture;\nuniform float intensity;\nuniform vec2 colorDomain;\nuniform float threshold;\nuniform float aggregationMode;\n\nattribute vec3 positions;\nattribute vec2 texCoords;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvoid main(void) {\n  gl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\n  vTexCoords = texCoords;\n  vec4 maxTexture = texture2D(maxTexture, vec2(0.5));\n  float maxValue = aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\n  float minValue = maxValue * threshold;\n  if (colorDomain[1] > 0.) {\n    // if user specified custom domain use it.\n    maxValue = colorDomain[1];\n    minValue = colorDomain[0];\n  }\n  vIntensityMax = intensity / maxValue;\n  vIntensityMin = intensity / minValue;\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME triangle-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D texture;\nuniform sampler2D colorTexture;\nuniform float aggregationMode;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvec4 getLinearColor(float value) {\n  float factor = clamp(value * vIntensityMax, 0., 1.);\n  vec4 color = texture2D(colorTexture, vec2(factor, 0.5));\n  color.a *= min(value * vIntensityMin, 1.0);\n  return color;\n}\n\nvoid main(void) {\n  vec4 weights = texture2D(texture, vTexCoords);\n  float weight = weights.r;\n\n  if (aggregationMode > 0.5) {\n    weight /= max(1.0, weights.a);\n  }\n\n  // discard pixels with 0 weight.\n  if (weight <= 0.) {\n     discard;\n  }\n\n  vec4 linearColor = getLinearColor(weight);\n  linearColor.a *= opacity;\n  gl_FragColor =linearColor;\n}\n`;\n","export default `\\\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute float weights;\nvarying vec4 weightsTexture;\nuniform float radiusPixels;\nuniform float textureWidth;\nuniform vec4 commonBounds;\nuniform float weightsScale;\nvoid main()\n{\n  weightsTexture = vec4(weights * weightsScale, 0., 0., 1.);\n\n  float radiusTexels  = project_pixel_size(radiusPixels) * textureWidth / (commonBounds.z - commonBounds.x);\n  gl_PointSize = radiusTexels * 2.;\n\n  vec3 commonPosition = project_position(positions, positions64Low);\n\n  // map xy from commonBounds to [-1, 1]\n  gl_Position.xy = (commonPosition.xy - commonBounds.xy) / (commonBounds.zw - commonBounds.xy) ;\n  gl_Position.xy = (gl_Position.xy * 2.) - (1.);\n}\n`;\n","// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  withParameters,\n  FEATURES,\n  hasFeatures\n} from '@luma.gl/core';\nimport {\n  Accessor,\n  AccessorFunction,\n  AttributeManager,\n  ChangeFlags,\n  Color,\n  COORDINATE_SYSTEM,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps: DefaultProps<HeatmapLayerProps> = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n];\n\nconst FLOAT_TARGET_FEATURES = [\n  FEATURES.COLOR_ATTACHMENT_RGBA32F, // ability to render to float texture\n  FEATURES.FLOAT_BLEND // ability to blend when rendering to float texture\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport type HeatmapLayerProps<DataT = any> = _HeatmapLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\ntype _HeatmapLayerProps<DataT> = {\n  /**\n   * Radius of the circle in pixels, to which the weight of an object is distributed.\n   *\n   * @default 30\n   */\n  radiusPixels?: number;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Value that is multiplied with the total weight at a pixel to obtain the final weight.\n   *\n   * @default 1\n   */\n  intensity?: number;\n\n  /**\n   * Ratio of the fading weight to the max weight, between `0` and `1`.\n   *\n   * For example, `0.1` affects all pixels with weight under 10% of the max.\n   *\n   * Ignored when `colorDomain` is specified.\n   * @default 0.05\n   */\n  threshold?: number;\n\n  /**\n   * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].\n   *\n   * @default null\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN';\n\n  /**\n   * Specifies the size of weight texture.\n   * @default 2048\n   */\n  weightsTextureSize?: number;\n\n  /**\n   * Interval in milliseconds during which changes to the viewport don't trigger aggregation.\n   *\n   * @default 500\n   */\n  debounceTimeout?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Visualizes the spatial distribution of data. */\nexport default class HeatmapLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT & Required<_HeatmapLayerProps<DataT>>> {\n  static layerName = 'HeatmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    colorDomain?: number[];\n    isWeightMapDirty?: boolean;\n    weightsTexture?: Texture2D;\n    zoom?: number;\n    worldBounds?: number[];\n    normalizedCommonBounds?: number[];\n    updateTimer?: any;\n    triPositionBuffer?: Buffer;\n    triTexCoordBuffer?: Buffer;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts: UpdateParameters<this>) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts: UpdateParameters<this>) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts: UpdateParameters<this>) {\n    const changeFlags: Partial<ChangeFlags> & {\n      boundsChanged?: boolean;\n      viewportZoomChanged?: boolean;\n    } = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vsMax,\n            _fs: fsMax\n          }\n        : {\n            vs: weightsVs,\n            _fs: weightsFs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate: any = false): boolean {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState: Partial<HeatmapLayer['state']> = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds!)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array as any);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    // Need to explictly specify clearColor as external context may have modified it\n    withParameters(this.context.gl, {clearColor: [0, 0, 0, 0]}, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [GL.ONE, GL.ONE],\n          blendEquation: GL.FUNC_ADD\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts: {useLayerCoordinateSystem?: boolean} = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n","export default `\\\nattribute vec4 inTexture;\nvarying vec4 outTexture;\n\nvoid main()\n{\noutTexture = inTexture;\ngl_Position = vec4(0, 0, 0, 1.);\n// Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)\ngl_PointSize = 1.0;\n}\n`;\n","export default `\\\nvarying vec4 outTexture;\nvoid main() {\n  gl_FragColor = outTexture;\n  gl_FragColor.g = outTexture.r / max(1.0, outTexture.a);\n}\n`;\n","export default `\\\nvarying vec4 weightsTexture;\n// Epanechnikov function, keeping for reference\n// float epanechnikovKDE(float u) {\n//   return 0.75 * (1.0 - u * u);\n// }\nfloat gaussianKDE(float u){\n  return pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\n}\nvoid main()\n{\n  float dist = length(gl_PointCoord - vec2(0.5, 0.5));\n  if (dist > 0.5) {\n    discard;\n  }\n  gl_FragColor = weightsTexture * gaussianKDE(2. * dist);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HeatmapLayer, Position, Color } from 'deck.gl/typed';\nimport React from 'react';\nimport { t, getSequentialSchemeRegistry, JsonObject } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent, getLayerType } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Centroid (Longitude and Latitude): ')}\n        value={`(${o.coordinate[0]}, ${o.coordinate[1]})`}\n      />\n    </div>\n  );\n}\nexport const getLayer: getLayerType<unknown> = (\n  formData,\n  payload,\n  onAddFilter,\n  setTooltip,\n) => {\n  const fd = formData;\n  const {\n    intensity = 1,\n    radius_pixels: radiusPixels = 30,\n    aggregation = 'SUM',\n    js_data_mutator: jsFnMutator,\n    linear_color_scheme: colorScheme,\n  } = fd;\n  let data = payload.data.features;\n\n  if (jsFnMutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutatorFunction = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutatorFunction(data);\n  }\n\n  const colorScale = getSequentialSchemeRegistry()\n    ?.get(colorScheme)\n    ?.createLinearScale([0, 6]);\n  const colorRange = colorScale\n    ?.range()\n    ?.map(color => hexToRGB(color))\n    ?.reverse() as Color[];\n\n  return new HeatmapLayer({\n    id: `heatmp-layer-${fd.slice_id}` as const,\n    data,\n    intensity,\n    radiusPixels,\n    colorRange,\n    aggregation: aggregation.toUpperCase(),\n    getPosition: (d: { position: Position; weight: number }) => d.position,\n    getWeight: (d: { position: number[]; weight: number }) =>\n      d.weight ? d.weight : 1,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n};\n\nfunction getPoints(data: any[]) {\n  return data.map(d => d.position);\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n"],"names":["filterProps","props","filterKeys","filteredProps","key","includes","AggregationLayer","CompositeLayer","constructor","arguments","_defineProperty","initializeAggregationLayer","dimensions","super","initializeState","this","context","setState","ignoreProps","_propTypes","data","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","Object","assign","create","pickingActive","devicePixelRatio","cssToDeviceRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","compareProps","newProps","propTypes","name","isAttributeChanged","undefined","obj","isEmpty","isObjectEmpty","_getAttributeManager","AttributeManager","id","stats","defaultColorRange","colorRangeToFlatArray","colorRange","normalize","ArrayType","flatArray","Float32Array","Number","isFinite","length","index","i","color","Layer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","updateObject","setNeedsUpdate","getPickingInfo","_ref","info","object","__source","parent","filterSubLayer","shouldRenderSubLayer","subLayerId","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","objectInfo","target","x","getSubLayerProps","sublayerProps","_this$props$updateTri","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","PROP_TYPES_SYMBOL","subLayerPropTypes","propType","concat","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","flatten","Boolean","debug","scratchArray","packVertices","points","point","TriangleLayer","vs","fs","modules","project32","add","positions","size","noAlloc","texCoords","model","_getModel","vertexCount","Model","geometry","Geometry","drawMode","draw","_ref2","uniforms","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms","TEXTURE_OPTIONS","mipmaps","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","value","position","getWeight","min","radiusPixels","max","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","FLOAT_TARGET_FEATURES","COLOR_ATTACHMENT_RGBA32F","FLOAT_BLEND","DIMENSIONS","HeatmapLayer","hasFeatures","supported","log","error","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","somethingChanged","_updateHeatmapState","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","COORDINATE_SYSTEM","DEFAULT","attributes","finalizeState","weightsTransform","maxWeightTransform","delete","_createTextures","textureSize","format","Texture2D","width","height","weights","positionAttributeName","Math","getParameters","floatTargetSupport","isWebGL2","getTextureParams","weightsScale","warn","_fs","_createWeightsTransform","_weightsTransform","Transform","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","Buffer","byteLength","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","viewportCorners","unproject","map","p","fround","visibleWorldBounds","y","xMin","apply","xMax","getBounds","newState","worldBounds","currentBounds","targetBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","bounds","yMin","yMax","getTextureCoordinates","projectPosition","colors","Uint8Array","setImageData","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","textureWidth","update","getNumInstances","withParameters","clearColor","clearRenderTarget","moduleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","scale","bottomLeftCommon","topRightCommon","boundingBox","currentWidth","currentHeight","newWidth","newHeight","xCenter","yCenter","scaleToAspectRatio","bottomLeftWorld","unprojectPosition","topRightWorld","slice","setTooltipContent","o","___EmotionJSX","className","TooltipRow","label","t","coordinate","getLayer","formData","payload","onAddFilter","setTooltip","_getSequentialSchemeR","_getSequentialSchemeR2","_colorScale$range","_colorScale$range$map","fd","radius_pixels","js_data_mutator","jsFnMutator","linear_color_scheme","colorScheme","features","sandboxedEval","jsFnMutatorFunction","colorScale","getSequentialSchemeRegistry","get","createLinearScale","range","hexToRGB","reverse","slice_id","toUpperCase","d","weight","commonLayerProps","createDeckGLComponent"],"sourceRoot":""}